// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs === ys) return true;
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.eqStringImpl);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);  
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["Eq1"] = Eq1;
  exports["eq1"] = eq1;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var OrdRecord = function (EqRecord0, compareRecord) {
      this.EqRecord0 = EqRecord0;
      this.compareRecord = compareRecord;
  };
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordRecordNil = new OrdRecord(function () {
      return Data_Eq.eqRowNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Ordering.EQ.value;
          };
      };
  });                                                                                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));    
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return new Ord(function () {
              return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
          }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  }; 
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return new OrdRecord(function () {
                      return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                              var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                              if ($49) {
                                  return left;
                              };
                              return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["join"] = join;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";

  exports.round = Math.round;

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Int = $PS["Data.Int"];
  var Data_Show = $PS["Data.Show"];
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $59 = v.value3 === 1.0;
      if ($59) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };
  exports["cssStringHSLA"] = cssStringHSLA;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  exports["Alt"] = Alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["bindST"] = bindST;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["swap"] = swap;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var range = function (dictUnfoldable1) {
      return function (start) {
          return function (end) {
              var go = function (delta) {
                  return function (i) {
                      var i$prime = i + delta | 0;
                      return new Data_Tuple.Tuple(i, (function () {
                          var $8 = i === end;
                          if ($8) {
                              return Data_Maybe.Nothing.value;
                          };
                          return new Data_Maybe.Just(i$prime);
                      })());
                  };
              };
              var delta = (function () {
                  var $9 = end >= start;
                  if ($9) {
                      return 1;
                  };
                  return -1 | 0;
              })();
              return unfoldr1(dictUnfoldable1)(go(delta))(start);
          };
      };
  };
  exports["Unfoldable1"] = Unfoldable1;
  exports["range"] = range;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                          
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $94 = Data_Maybe.maybe([  ])(singleton);
          return function ($95) {
              return $94(f($95));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["head"] = head;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["deleteBy"] = deleteBy;
  exports["range"] = $foreign.range;
  exports["cons"] = $foreign.cons;
  exports["filter"] = $foreign.filter;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.Partial"] = $PS["Data.Array.Partial"] || {};
  var exports = $PS["Data.Array.Partial"];
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];           
  var Compactable = function (compact, separate) {
      this.compact = compact;
      this.separate = separate;
  };
  exports["Compactable"] = Compactable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();                                                                                                   
  var fromRight = function (dictPartial) {
      return function (v) {
          if (v instanceof Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          if (v instanceof Left) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [ v.constructor.name ]);
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["hush"] = hush;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];                      
  var Filterable = function (Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
      this.Compactable0 = Compactable0;
      this.Functor1 = Functor1;
      this.filter = filter;
      this.filterMap = filterMap;
      this.partition = partition;
      this.partitionMap = partitionMap;
  };
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["Filterable"] = Filterable;
  exports["filterMap"] = filterMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];      
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep.Show"] = $PS["Data.Generic.Rep.Show"] || {};
  var exports = $PS["Data.Generic.Rep.Show"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.now = function () {
    return new Date();
  };

  exports.dateMethod = function (method, date) {
    return date[method]();
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.JSDate"] = $PS["Data.JSDate"] || {};
  var exports = $PS["Data.JSDate"];
  var $foreign = $PS["Data.JSDate"];
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  exports["getTime"] = getTime;
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Data_Functor = $PS["Data.Functor"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });                                                                     
  var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableList;
  }, function (dictMonoid) {
      return function (f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  var $207 = f(i);
                  return function ($208) {
                      return $206($207($208));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      return function (acc) {
          var $209 = Data_Foldable.foldl(foldableList)(function (v) {
              return function (a) {
                  return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
              };
          })(new Data_Tuple.Tuple(0, acc));
          return function ($210) {
              return Data_Tuple.snd($209($210));
          };
      };
  }, function (f) {
      return function (b) {
          return function (xs) {
              var v = (function () {
                  var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                      return function (a) {
                          return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                      };
                  });
                  return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
              })();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                  };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
      };
  });
  var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorList;
  }, function (f) {
      return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
          return function (x) {
              return function (acc) {
                  return new Cons(f(i)(x), acc);
              };
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_v2) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, v2) {
                              if (!v2) {
                                  $tco_done = true;
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  return;
                              };
                              $tco_done = true;
                              return false;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                          };
                          return $tco_result;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  }; 
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["eqList"] = eqList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["functorWithIndexList"] = functorWithIndexList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var partition = function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $223 = p(x);
                  if ($223) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  };          
  var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["length"] = length;
  exports["head"] = head;
  exports["filter"] = filter;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["partition"] = partition;
  exports["zipWith"] = zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = (function () {
      var $215 = Data_Newtype.unwrap(newtypeList);
      return function ($216) {
          return Data_Lazy.force($215($216));
      };
  })();   
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($217) {
          return step(f($217));
      }));
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1.value1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0)(go(f)(v1.value1.value0));
                  };
                  if (v1.value1 instanceof Data_Maybe.Nothing) {
                      return cons(v1.value0)(nil);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, (function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["newtypeList"] = newtypeList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
      return function ($258) {
          return Data_List_Lazy_Types.List($256($257($258)));
      };
  };
  exports["filter"] = filter;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (m1) {
              return function (m2) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
          var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
          var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
          return function ($761) {
              return $758($759($760($761)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($762) {
              return Data_Function["const"](predicate($762));
          });
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                  var $763 = Data_Function.flip(f);
                  return function ($764) {
                      return Data_Tuple.uncurry($763($764));
                  };
              })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  var mapMaybeWithKey = function (dictOrd) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
              return function (a) {
                  return function (acc) {
                      return Data_Maybe.maybe(acc)(function (b) {
                          return insert(dictOrd)(k)(b)(acc);
                      })(f(k)(a));
                  };
              };
          })(empty);
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var insertWith = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (v) {
                  return alter(dictOrd)((function () {
                      var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                      return function ($768) {
                          return Data_Maybe.Just.create($767($768));
                      };
                  })())(k);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($770) {
                                  return Data_Maybe.Just.create($769($770));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var monoidMap = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMap(dictOrd);
      }, empty);
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["insertWith"] = insertWith;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["member"] = member;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["union"] = union;
  exports["size"] = size;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["mapMaybeWithKey"] = mapMaybeWithKey;
  exports["eqMap"] = eqMap;
  exports["semigroupMap"] = semigroupMap;
  exports["monoidMap"] = monoidMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];                
  var keys = (function () {
      var $0 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($1) {
          return $0($1);
      };
  })();
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $63 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($64) {
          return $63(toList($64));
      };
  };
  var size = function (v) {
      return Data_Map_Internal.size(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          var $65 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
          return function ($66) {
              return $65(toList($66));
          };
      };
  }, function (f) {
      return function (x) {
          var $67 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
          return function ($68) {
              return $67(toList($68));
          };
      };
  }, function (f) {
      return function (x) {
          var $69 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
          return function ($70) {
              return $69(toList($70));
          };
      };
  });
  var eqSet = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
          };
      });
  }; 
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["member"] = member;
  exports["size"] = size;
  exports["eqSet"] = eqSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Typelevel.Undefined"] = $PS["Data.Typelevel.Undefined"] || {};
  var exports = $PS["Data.Typelevel.Undefined"];
  var Data_Unit = $PS["Data.Unit"];                
  var $$undefined = Data_Unit.unit;
  exports["undefined"] = $$undefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Typelevel.Num.Sets"] = $PS["Data.Typelevel.Num.Sets"] || {};
  var exports = $PS["Data.Typelevel.Num.Sets"];
  var Data_Typelevel_Undefined = $PS["Data.Typelevel.Undefined"];
  var Nat = function (toInt) {
      this.toInt = toInt;
  };
  var Pos = function (Nat0) {
      this.Nat0 = Nat0;
  };
  var toInt = function (dict) {
      return dict.toInt;
  };
  var toInt$prime = function (dictNat) {
      return function (v) {
          return toInt(dictNat)(Data_Typelevel_Undefined["undefined"]);
      };
  }; 
  var natD5 = new Nat(function (v) {
      return 5;
  });
  var posD5 = new Pos(function () {
      return natD5;
  });
  var natD4 = new Nat(function (v) {
      return 4;
  });
  var posD4 = new Pos(function () {
      return natD4;
  });
  var natD3 = new Nat(function (v) {
      return 3;
  });
  var posD3 = new Pos(function () {
      return natD3;
  });
  var natD2 = new Nat(function (v) {
      return 2;
  });
  var posD2 = new Pos(function () {
      return natD2;
  });
  var natD1 = new Nat(function (v) {
      return 1;
  });
  var posD1 = new Pos(function () {
      return natD1;
  });
  var natD0 = new Nat(function (v) {
      return 0;
  });
  exports["toInt"] = toInt;
  exports["toInt'"] = toInt$prime;
  exports["natD0"] = natD0;
  exports["natD1"] = natD1;
  exports["natD2"] = natD2;
  exports["natD3"] = natD3;
  exports["natD4"] = natD4;
  exports["natD5"] = natD5;
  exports["posD1"] = posD1;
  exports["posD2"] = posD2;
  exports["posD3"] = posD3;
  exports["posD4"] = posD4;
  exports["posD5"] = posD5;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Typelevel.Num.Ops"] = $PS["Data.Typelevel.Num.Ops"] || {};
  var exports = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Succ = function (Nat0, Pos1) {
      this.Nat0 = Nat0;
      this.Pos1 = Pos1;
  };
  var DivMod10 = function (Nat0, Nat1) {
      this.Nat0 = Nat0;
      this.Nat1 = Nat1;
  };
  var typelevelSucc = function (dictPos) {
      return function (dictIsZero) {
          return function (dictDivMod10) {
              return function (dictSuccP) {
                  return function (dictDivMod101) {
                      return new Succ(dictDivMod10.Nat1, function () {
                          return dictPos;
                      });
                  };
              };
          };
      };
  };
  var divMod10D3D0 = new DivMod10(function () {
      return Data_Typelevel_Num_Sets.natD0;
  }, function () {
      return Data_Typelevel_Num_Sets.natD3;
  });
  var divMod10D2D0 = new DivMod10(function () {
      return Data_Typelevel_Num_Sets.natD0;
  }, function () {
      return Data_Typelevel_Num_Sets.natD2;
  });
  var divMod10D1D0 = new DivMod10(function () {
      return Data_Typelevel_Num_Sets.natD0;
  }, function () {
      return Data_Typelevel_Num_Sets.natD1;
  });
  var divMod10D0D0 = new DivMod10(function () {
      return Data_Typelevel_Num_Sets.natD0;
  }, function () {
      return Data_Typelevel_Num_Sets.natD0;
  });
  exports["typelevelSucc"] = typelevelSucc;
  exports["divMod10D0D0"] = divMod10D0D0;
  exports["divMod10D1D0"] = divMod10D1D0;
  exports["divMod10D2D0"] = divMod10D2D0;
  exports["divMod10D3D0"] = divMod10D3D0;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_Partial = $PS["Data.Array.Partial"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Type_Proxy = $PS["Type.Proxy"];
  var toArray = function (v) {
      return v;
  };
  var range = function (dictNat) {
      return function (dictNat1) {
          return function (dictMax) {
              return function (dictMin) {
                  return function (dictSub) {
                      return function (dictSucc) {
                          return function (a) {
                              return function (b) {
                                  return Data_Array.range(Data_Typelevel_Num_Sets.toInt(dictNat)(a))(Data_Typelevel_Num_Sets.toInt(dictNat1)(b));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var head = function (dictPos) {
      return function (v) {
          return Data_Array_Partial.head()(v);
      };
  };
  var fill = function (dictNat) {
      return function (f) {
          var s = Data_Typelevel_Num_Sets["toInt'"](dictNat)(Type_Proxy["Proxy"].value);
          var range_ = (function () {
              if (s === 0) {
                  return [  ];
              };
              return Data_Array.range(0)(s - 1 | 0);
          })();
          return Data_Functor.map(Data_Functor.functorArray)(f)(range_);
      };
  };
  var empty = [  ];
  var cons = function (dictSucc) {
      return function (x) {
          return function (v) {
              return Data_Array.cons(x)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
  exports["fill"] = fill;
  exports["toArray"] = toArray;
  exports["head"] = head;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Canceler = function (x) {
      return x;
  };                                                                   
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $43 = Data_Functor["void"](Effect.functorEffect);
      return function ($44) {
          return $43(launchAff($44));
      };
  })();
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $45 = Effect_Class.liftEffect(monadEffectAff);
      return function ($46) {
          return Canceler(Data_Function["const"]($45($46)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["joinFiber"] = joinFiber;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };

  exports.clearInterval = function (id) {
    return function () {
      clearInterval(id);
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setInterval"] = $foreign.setInterval;
  exports["clearInterval"] = $foreign.clearInterval;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (e) {
                  return v(Data_Functor.map(dictFunctor)(function (v1) {
                      return function ($66) {
                          return v1(f($66));
                      };
                  })(e));
              };
          };
      });
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var sample_ = function (dictIsEvent) {
      return sampleBy(dictIsEvent)(Data_Function["const"]);
  };
  var applyABehavior = function (dictFunctor) {
      return new Control_Apply.Apply(function () {
          return functorABehavior(dictFunctor);
      }, function (v) {
          return function (v1) {
              return function (e) {
                  return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
              };
          };
      });
  };
  var applicativeABehavior = function (dictFunctor) {
      return new Control_Applicative.Applicative(function () {
          return applyABehavior(dictFunctor);
      }, function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
          };
      });
  };
  exports["sample_"] = sample_;
  exports["functorABehavior"] = functorABehavior;
  exports["applicativeABehavior"] = applicativeABehavior;
})(PS);
(function(exports) {
  ("use strict");

  function copyAudio(inputs) {
    var out = new Array(inputs.length).fill(null);
    for (var i = 0; i < inputs.length; i++) {
      out[i] = new Array(inputs[i].length).fill(null);
      for (var j = 0; j < inputs[i].length; j++) {
        out[i][j] = Array.from(inputs[i][j]);
      }
    }
    return out;
  }

  function mergeAudio(retention, prev, inputs) {
    for (var i = 0; i < inputs.length; i++) {
      for (var j = 0; j < inputs[i].length; j++) {
        prev[i][j] = prev[i][j].
           slice(Math.max(0, prev[i][j].length - retention))
          .concat(Array.from(inputs[i][j]));
      }
    }
  } 

  exports.makePeriodicWaveImpl = function (ctx) {
    return function (real_) {
      return function (imag_) {
        return function () {
          var real = new Float32Array(real_.length);
          var imag = new Float32Array(imag_.length);
          for (var i = 0; i < real_.length; i++) {
            real[i] = real_[i];
          }
          for (var i = 0; i < imag_.length; i++) {
            imag[i] = imag_[i];
          }
          return ctx.createPeriodicWave(real, imag, {
            disableNormalization: true,
          });
        };
      };
    };
  };

  exports.touchAudio = function (predicates) {
    return function (timeToSet) {
      return function (instructions) {
        return function (context) {
          return function (audioInfo) {
            return function (g) {
              return function () {
                // should never happen
                if (timeToSet < context.currentTime) {
                  console.warn(
                    "Programming error: we are setting in the past",
                    timeToSet,
                    context.currentTime
                  );
                  timeToSet = context.currentTime;
                }
                var generators = g;
                for (var i = 0; i < instructions.length; i++) {
                  var c = instructions[i];
                  if (predicates.isDisconnectFrom(c)) {
                    generators[c.value0].disconnect(generators[c.value1]);
                  } else if (predicates.isConnectTo(c)) {
                    if (predicates.isNothing(c.value2)) {
                      generators[c.value0].connect(generators[c.value1]);
                    } else {
                      generators[c.value0].connect(
                        generators[c.value1],
                        c.value2.value0.value0,
                        c.value2.value0.value1
                      );
                    }
                  } else if (predicates.isShuffle(c)) {
                    var old = generators;
                    var generators = new Array(c.value0.length);
                    for (var j = 0; j < c.value0.length; j++) {
                      generators[c.value0[j].value1] = old[c.value0[j].value0];
                    }
                  } else if (predicates.isNewUnit(c)) {
                    generators[c.value0] = predicates.isSpeaker(c.value1)
                      ? context.destination
                      : predicates.isMicrophone(c.value1)
                      ? context.createMediaStreamSource(
                          audioInfo.microphones[
                            Object.keys(audioInfo.microphones)[0]
                          ]
                        )
                      : predicates.isPlay(c.value1)
                      ? context.createMediaElementSource(
                          audioInfo.tracks[c.value3.value0]
                        )
                      : predicates.isPlayBuf(c.value1)
                      ? context.createBufferSource()
                      : predicates.isLoopBuf(c.value1)
                      ? context.createBufferSource()
                      : predicates.isLowpass(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isBandpass(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isLowshelf(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isHighshelf(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isNotch(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isAllpass(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isPeaking(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isHighpass(c.value1)
                      ? context.createBiquadFilter()
                      : predicates.isConvolver(c.value1)
                      ? context.createConvolver()
                      : predicates.isDynamicsCompressor(c.value1)
                      ? context.createDynamicsCompressor()
                      : predicates.isSawtoothOsc(c.value1)
                      ? context.createOscillator()
                      : predicates.isTriangleOsc(c.value1)
                      ? context.createOscillator()
                      : predicates.isPeriodicOsc(c.value1)
                      ? context.createOscillator()
                      : predicates.isWaveShaper(c.value1)
                      ? context.createWaveShaper()
                      : predicates.isDup(c.value1)
                      ? context.createGain()
                      : predicates.isStereoPanner(c.value1)
                      ? context.createStereoPanner()
                      : predicates.isSinOsc(c.value1)
                      ? context.createOscillator()
                      : predicates.isSquareOsc(c.value1)
                      ? context.createOscillator()
                      : predicates.isMul(c.value1)
                      ? (function () {
                          var nConnections = 0;
                          for (var j = 0; j < instructions.length; j++) {
                            // this hack is necessary because
                            // custom audio worklets need explicit
                            // channel assignments. maybe make explicit everywhere?
                            var d = instructions[j];
                            if (
                              predicates.isConnectTo(d) &&
                              d.value1 == c.value0
                            ) {
                              d.value2 = predicates.justly(
                                predicates.tupply(0)(nConnections)
                              );
                              nConnections += 1;
                            }
                          }
                          return new AudioWorkletNode(context, "ps-aud-mul", {
                            numberOfInputs: nConnections,
                            numberOfOutputs: 1,
                          });
                        })()
                      : predicates.isAudioWorkletGenerator(c.value1) ||
                        predicates.isAudioWorkletProcessor(c.value1) ||
                        predicates.isAudioWorkletAggregator(c.value1)
                      ? (function () {
                          var initialParams = {};
                          for (var j = 0; j < instructions.length; j++) {
                            var d = instructions[j];
                            if (
                              predicates.isSetCustomParam(d) &&
                              d.value0 == c.value0
                            ) {
                              initialParams[d.value1] = d.value2;
                            }
                          }
                          if (predicates.isAudioWorkletAggregator(c.value1)) {
                            var nConnections = 0;
                            for (var j = 0; j < instructions.length; j++) {
                              // this hack is necessary because
                              // custom audio worklets need explicit
                              // channel assignments. maybe make explicit everywhere?
                              var d = instructions[j];
                              if (
                                predicates.isConnectTo(d) &&
                                d.value1 == c.value0
                              ) {
                                d.value2 = predicates.justly(
                                  predicates.tupply(0)(nConnections)
                                );
                                nConnections += 1;
                              }
                            }
                          }
                          return new AudioWorkletNode(context, c.value3.value0, {
                            numberOfInputs: predicates.isAudioWorkletGenerator(
                              c.value1
                            )
                              ? 0
                              : predicates.isAudioWorkletProcessor(c.value1)
                              ? 1
                              : 2,
                            numberOfOutputs: 1,
                            parameterData: initialParams,
                          });
                        })()
                      : predicates.isAdd(c.value1)
                      ? context.createGain()
                      : predicates.isDelay(c.value1)
                      ? context.createDelay(10.0) // magic number for 10 seconds...make tweakable?
                      : predicates.isConstant(c.value1)
                      ? context.createConstantSource()
                      : predicates.isGain(c.value1)
                      ? context.createGain()
                      : predicates.isSplitRes(c.value1)
                      ? context.createGain()
                      : predicates.isDupRes(c.value1)
                      ? context.createGain()
                      : predicates.isSplitter(c.value1)
                      ? context.createChannelSplitter(c.value2.value0)
                      : predicates.isMerger(c.value1)
                      ? context.createChannelMerger(c.value2.value0)
                      : null;
                    if (predicates.isSinOsc(c.value1)) {
                      generators[c.value0].type = "sine";
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isLoopBuf(c.value1)) {
                      generators[c.value0].loop = true;
                      generators[c.value0].buffer =
                        audioInfo.buffers[c.value3.value0];
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isWaveShaper(c.value1)) {
                      generators[c.value0].curve =
                        audioInfo.floatArrays[c.value3.value0];
                    } else if (predicates.isConvolver(c.value1)) {
                      generators[c.value0].buffer =
                        audioInfo.buffers[c.value3.value0];
                    } else if (predicates.isPlayBuf(c.value1)) {
                      generators[c.value0].loop = false;
                      generators[c.value0].buffer =
                        audioInfo.buffers[c.value3.value0];
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isPlay(c.value1)) {
                      // todo - if the same element is resumed via play it won't
                      // work in the current setup
                      // this is because there is a 1-to-1 relationship between source
                      // and media element
                      // the current workaround is to create multiple media elements.
                      // todo - add delay somehow...
                      audioInfo.tracks[c.value3.value0].play();
                    } else if (predicates.isConstant(c.value1)) {
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isLowpass(c.value1)) {
                      generators[c.value0].type = "lowpass";
                    } else if (predicates.isBandpass(c.value1)) {
                      generators[c.value0].type = "bandpass";
                    } else if (predicates.isLowshelf(c.value1)) {
                      generators[c.value0].type = "lowshelf";
                    } else if (predicates.isHighshelf(c.value1)) {
                      generators[c.value0].type = "highshelf";
                    } else if (predicates.isNotch(c.value1)) {
                      generators[c.value0].type = "notch";
                    } else if (predicates.isAllpass(c.value1)) {
                      generators[c.value0].type = "allpass";
                    } else if (predicates.isPeaking(c.value1)) {
                      generators[c.value0].type = "peaking";
                    } else if (predicates.isHighpass(c.value1)) {
                      generators[c.value0].type = "highpass";
                    } else if (predicates.isSquareOsc(c.value1)) {
                      generators[c.value0].type = "square";
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isTriangleOsc(c.value1)) {
                      generators[c.value0].type = "triangle";
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isSawtoothOsc(c.value1)) {
                      generators[c.value0].type = "sawtooth";
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isPeriodicOsc(c.value1)) {
                      // generators[c.value0].type = "custom";
                      generators[c.value0].setPeriodicWave(
                        audioInfo.periodicWaves[c.value3.value0]
                      );
                      generators[c.value0].start(timeToSet + c.value4.value0);
                    } else if (predicates.isSplitRes(c.value1)) {
                      generators[c.value0].gain.linearRampToValueAtTime(
                        1.0,
                        timeToSet
                      );
                    } else if (predicates.isDupRes(c.value1)) {
                      generators[c.value0].gain.linearRampToValueAtTime(
                        1.0,
                        timeToSet
                      );
                    }
                  } else if (predicates.isSetFrequency(c)) {
                    generators[c.value0].frequency.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetPan(c)) {
                    generators[c.value0].pan.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetGain(c)) {
                    generators[c.value0].gain.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetQ(c)) {
                    generators[c.value0].Q.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetBuffer(c)) {
                    var myArrayBuffer = context.createBuffer(
                      c.value2.length,
                      c.value2[0].length,
                      c.value1
                    );
                    for (var
                          channel = 0;
                      channel < myArrayBuffer.numberOfChannels;
                      channel++
                    ) {
                      var nowBuffering = myArrayBuffer.getChannelData(channel);
                      for (var i = 0; i < myArrayBuffer.length; i++) {
                        nowBuffering[i] = c.value2[channel][i];
                      }
                    }
                    generators[c.value0].buffer = myArrayBuffer;
                  } else if (predicates.isSetDelay(c)) {
                    generators[c.value0].delayTime.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetOffset(c)) {
                    generators[c.value0].offset.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetLoopStart(c)) {
                    generators[c.value0].loopStart = c.value1;
                  } else if (predicates.isSetLoopEnd(c)) {
                    generators[c.value0].loopEnd = c.value1;
                  } else if (predicates.isSetOversample(c)) {
                    generators[c.value0].oversample = c.value1;
                  } else if (predicates.isSetCurve(c)) {
                    var curve = new Float32Array(c.value1.length);
                    for (var i = 0; i < c.value1.length; i++) {
                      curve[i] = c.value1[i];
                    }

                    generators[c.value0].curve = curve;
                  } else if (predicates.isSetPlaybackRate(c)) {
                    generators[c.value0].playbackRate.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetThreshold(c)) {
                    generators[c.value0].threshold.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetKnee(c)) {
                    generators[c.value0].knee.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetRatio(c)) {
                    generators[c.value0].ratio.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetAttack(c)) {
                    generators[c.value0].attack.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetRelease(c)) {
                    generators[c.value0].release.linearRampToValueAtTime(
                      c.value1,
                      timeToSet + c.value2
                    );
                  } else if (predicates.isSetCustomParam(c)) {
                    generators[c.value0].parameters.
                       get(c.value1)
                      .linearRampToValueAtTime(c.value2, timeToSet + c.value3);
                  } else if (predicates.isStop(c)) {
                    generators[c.value0].stop();
                  }
                }
                return generators;
              };
            };
          };
        };
      };
    };
  };

  exports.getAudioClockTime = function (ctx) {
    return function () {
      return ctx.currentTime;
    };
  };

  exports.getBoundingClientRect = function (canvas) {
    return function () {
      var o = canvas.getBoundingClientRect();
      return {
        x: o.left,
        y: o.top,
        width: o.right - o.left,
        height: o.bottom - o.top,
      };
    };
  };
})(PS["FRP.Behavior.Audio"] = PS["FRP.Behavior.Audio"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];              
  var IsEvent = function (Alternative0, Filterable1, fix, fold, keepLatest, sampleOn) {
      this.Alternative0 = Alternative0;
      this.Filterable1 = Filterable1;
      this.fix = fix;
      this.fold = fold;
      this.keepLatest = keepLatest;
      this.sampleOn = sampleOn;
  };
  exports["IsEvent"] = IsEvent;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v((function () {
              var $45 = Data_Functor["void"](Effect.functorEffect);
              return function ($46) {
                  return $45(k($46));
              };
          })());
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($47) {
                          return k(f($47));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (k) {
              return v(function ($48) {
                  return k(f($48));
              });
          };
      };
  });
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var $34 = p(a);
                  if ($34) {
                      return k(a);
                  };
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              });
          };
      };
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = new Data_Compactable.Compactable(function (xs) {
      return Data_Functor.map(functorEvent)(function (x) {
          return Data_Maybe.fromJust()(x);
      })(filter(Data_Maybe.isJust)(xs));
  }, function (xs) {
      return {
          left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
          right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
      };
  });
  var filterableEvent = new Data_Filterable.Filterable(function () {
      return compactableEvent;
  }, function () {
      return functorEvent;
  }, filter, function (f) {
      var $49 = Data_Functor.map(functorEvent)(function (x) {
          return Data_Maybe.fromJust()(x);
      });
      var $50 = filter(Data_Maybe.isJust);
      var $51 = Data_Functor.map(functorEvent)(f);
      return function ($52) {
          return $49($50($51($52)));
      };
  }, function (p) {
      return function (xs) {
          return {
              yes: filter(p)(xs),
              no: filter((function () {
                  var $53 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                  return function ($54) {
                      return $53(p($54));
                  };
              })())(xs)
          };
      };
  }, function (f) {
      return function (xs) {
          return {
              left: Data_Filterable.filterMap(filterableEvent)((function () {
                  var $55 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                  return function ($56) {
                      return $55(f($56));
                  };
              })())(xs),
              right: Data_Filterable.filterMap(filterableEvent)(function ($57) {
                  return Data_Either.hush(f($57));
              })(xs)
          };
      };
  });
  var applyEvent = new Control_Apply.Apply(function () {
      return functorEvent;
  }, function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return function __do() {
                          Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($58) {
                              return k(a($58));
                          }))();
                      };
                  })();
                  var c2 = v1(function (b) {
                      return function __do() {
                          Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($59) {
                              return k((function (v2) {
                                  return v2(b);
                              })($59));
                          }))();
                      };
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  });
  var applicativeEvent = new Control_Applicative.Applicative(function () {
      return applyEvent;
  }, function (a) {
      return function (k) {
          return function __do() {
              k(a)();
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  });
  var altEvent = new Control_Alt.Alt(function () {
      return functorEvent;
  }, function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var c1 = v(k)();
                  var c2 = v1(k)();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  });
  var plusEvent = new Control_Plus.Plus(function () {
      return altEvent;
  }, function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
  });
  var alternativeEvent = new Control_Alternative.Alternative(function () {
      return applicativeEvent;
  }, function () {
      return plusEvent;
  });
  var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
      return alternativeEvent;
  }, function () {
      return filterableEvent;
  }, fix, fold, keepLatest, sampleOn);
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Timer = $PS["Effect.Timer"];
  var FRP_Event = $PS["FRP.Event"];
  var interval = function (n) {
      return FRP_Event.makeEvent(function (k) {
          return function __do() {
              var id = Effect_Timer.setInterval(n)(function __do() {
                  var time = Effect_Now.now();
                  return k(time)();
              })();
              return Effect_Timer.clearInterval(id);
          };
      });
  };
  exports["interval"] = interval;
})(PS);
(function(exports) {
  "use strict";

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var toUnfoldable = function (dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($38) {
          return $36($37($38));
      };
  };                               
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isSubmap = function (dictEq) {
      return function (m1) {
          return function (m2) {
              var f = function (k) {
                  return function (v) {
                      return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
                  };
              };
              return $foreign.all(f)(m1);
          };
      };
  };
  var eqObject = function (dictEq) {
      return new Data_Eq.Eq(function (m1) {
          return function (m2) {
              return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
      });
  };
  exports["singleton"] = singleton;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["eqObject"] = eqObject;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
  exports["keys"] = $foreign.keys;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(ctx) {
      return function(width) {
          return function() {
              ctx.lineWidth = width;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.setShadowColor = function(ctx) {
      return function(color) {
          return function() {
              ctx.shadowColor = color;
          };
      };
  };

  exports.setShadowBlur = function(ctx) {
      return function(blur) {
          return function() {
              ctx.shadowBlur = blur;
          };
      };
  };

  exports.setShadowOffsetX = function(ctx) {
      return function(offsetX) {
          return function() {
              ctx.shadowOffsetX = offsetX;
          };
      };
  };

  exports.setShadowOffsetY = function(ctx) {
      return function(offsetY) {
          return function() {
              ctx.shadowOffsetY = offsetY;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var a = action();
              $foreign.restore(ctx)();
              return a;
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.stroke(ctx)();
              return a;
          };
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.fill(ctx)();
              return a;
          };
      };
  };
  exports["strokePath"] = strokePath;
  exports["fillPath"] = fillPath;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["clip"] = $foreign.clip;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["arc"] = $foreign.arc;
  exports["rect"] = $foreign.rect;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Graphics.Drawing.Font"] = $PS["Graphics.Drawing.Font"] || {};
  var exports = $PS["Graphics.Drawing.Font"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("px " + v.value0)));
  };
  exports["fontString"] = fontString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Graphics.Drawing"] = $PS["Graphics.Drawing"] || {};
  var exports = $PS["Graphics.Drawing"];
  var Color = $PS["Color"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Drawing_Font = $PS["Graphics.Drawing.Font"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Arc = (function () {
      function Arc(value0) {
          this.value0 = value0;
      };
      Arc.create = function (value0) {
          return new Arc(value0);
      };
      return Arc;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx,
              translateY: ty
          });
      };
  }; 
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx,
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List_Types.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value1.value1)(function (pt) {
                      return Graphics_Canvas.lineTo(ctx)(pt.x)(pt.y);
                  })();
                  return Control_Applicative.when(Effect.applicativeEffect)(v.value0)(Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Arc) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.arc(ctx)(v.value0));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing (line 268, column 3 - line 268, column 38): " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(ctx)(Color.cssStringHSLA(color));
              })();
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(ctx)(blur);
              })();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(ctx)(offset.x)();
                      return Graphics_Canvas.setShadowOffsetY(ctx)(offset.y)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(ctx)(Color.cssStringHSLA(color));
              })();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(ctx)(width);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(ctx)(Color.cssStringHSLA(color));
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(ctx)(Graphics_Drawing_Font.fontString(v.value0))();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing (line 221, column 3 - line 224, column 21): " + [ v.constructor.name ]);
      };
      return go;
  };                                                           
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value,
          lineWidth: new Data_Maybe.Just(c)
      };
  };                           
  var arc = function (x) {
      return function (y) {
          return function (start) {
              return function (end) {
                  return function (radius) {
                      return new Arc({
                          x: x,
                          y: y,
                          start: start,
                          end: end,
                          radius: radius
                      });
                  };
              };
          };
      };
  };
  exports["render"] = render;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  exports["merge"] = merge;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Behavior.Audio"] = $PS["FRP.Behavior.Audio"] || {};
  var exports = $PS["FRP.Behavior.Audio"];
  var $foreign = $PS["FRP.Behavior.Audio"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map = $PS["Data.Map"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vec = $PS["Data.Vec"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Drawing = $PS["Graphics.Drawing"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var On = (function () {
      function On() {

      };
      On.value = new On();
      return On;
  })();
  var Off = (function () {
      function Off() {

      };
      Off.value = new Off();
      return Off;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var TwoX = (function () {
      function TwoX() {

      };
      TwoX.value = new TwoX();
      return TwoX;
  })();
  var FourX = (function () {
      function FourX() {

      };
      FourX.value = new FourX();
      return FourX;
  })();
  var Microphone$prime$prime = (function () {
      function Microphone$prime$prime() {

      };
      Microphone$prime$prime.value = new Microphone$prime$prime();
      return Microphone$prime$prime;
  })();
  var AudioWorkletGenerator$prime$prime = (function () {
      function AudioWorkletGenerator$prime$prime() {

      };
      AudioWorkletGenerator$prime$prime.value = new AudioWorkletGenerator$prime$prime();
      return AudioWorkletGenerator$prime$prime;
  })();
  var AudioWorkletProcessor$prime$prime = (function () {
      function AudioWorkletProcessor$prime$prime() {

      };
      AudioWorkletProcessor$prime$prime.value = new AudioWorkletProcessor$prime$prime();
      return AudioWorkletProcessor$prime$prime;
  })();
  var AudioWorkletAggregator$prime$prime = (function () {
      function AudioWorkletAggregator$prime$prime() {

      };
      AudioWorkletAggregator$prime$prime.value = new AudioWorkletAggregator$prime$prime();
      return AudioWorkletAggregator$prime$prime;
  })();
  var Play$prime$prime = (function () {
      function Play$prime$prime() {

      };
      Play$prime$prime.value = new Play$prime$prime();
      return Play$prime$prime;
  })();
  var PlayBuf$prime$prime = (function () {
      function PlayBuf$prime$prime() {

      };
      PlayBuf$prime$prime.value = new PlayBuf$prime$prime();
      return PlayBuf$prime$prime;
  })();
  var LoopBuf$prime$prime = (function () {
      function LoopBuf$prime$prime() {

      };
      LoopBuf$prime$prime.value = new LoopBuf$prime$prime();
      return LoopBuf$prime$prime;
  })();
  var Lowpass$prime$prime = (function () {
      function Lowpass$prime$prime() {

      };
      Lowpass$prime$prime.value = new Lowpass$prime$prime();
      return Lowpass$prime$prime;
  })();
  var Highpass$prime$prime = (function () {
      function Highpass$prime$prime() {

      };
      Highpass$prime$prime.value = new Highpass$prime$prime();
      return Highpass$prime$prime;
  })();
  var Bandpass$prime$prime = (function () {
      function Bandpass$prime$prime() {

      };
      Bandpass$prime$prime.value = new Bandpass$prime$prime();
      return Bandpass$prime$prime;
  })();
  var Lowshelf$prime$prime = (function () {
      function Lowshelf$prime$prime() {

      };
      Lowshelf$prime$prime.value = new Lowshelf$prime$prime();
      return Lowshelf$prime$prime;
  })();
  var Highshelf$prime$prime = (function () {
      function Highshelf$prime$prime() {

      };
      Highshelf$prime$prime.value = new Highshelf$prime$prime();
      return Highshelf$prime$prime;
  })();
  var Peaking$prime$prime = (function () {
      function Peaking$prime$prime() {

      };
      Peaking$prime$prime.value = new Peaking$prime$prime();
      return Peaking$prime$prime;
  })();
  var Notch$prime$prime = (function () {
      function Notch$prime$prime() {

      };
      Notch$prime$prime.value = new Notch$prime$prime();
      return Notch$prime$prime;
  })();
  var Allpass$prime$prime = (function () {
      function Allpass$prime$prime() {

      };
      Allpass$prime$prime.value = new Allpass$prime$prime();
      return Allpass$prime$prime;
  })();
  var Convolver$prime$prime = (function () {
      function Convolver$prime$prime() {

      };
      Convolver$prime$prime.value = new Convolver$prime$prime();
      return Convolver$prime$prime;
  })();
  var DynamicsCompressor$prime$prime = (function () {
      function DynamicsCompressor$prime$prime() {

      };
      DynamicsCompressor$prime$prime.value = new DynamicsCompressor$prime$prime();
      return DynamicsCompressor$prime$prime;
  })();
  var SawtoothOsc$prime$prime = (function () {
      function SawtoothOsc$prime$prime() {

      };
      SawtoothOsc$prime$prime.value = new SawtoothOsc$prime$prime();
      return SawtoothOsc$prime$prime;
  })();
  var TriangleOsc$prime$prime = (function () {
      function TriangleOsc$prime$prime() {

      };
      TriangleOsc$prime$prime.value = new TriangleOsc$prime$prime();
      return TriangleOsc$prime$prime;
  })();
  var PeriodicOsc$prime$prime = (function () {
      function PeriodicOsc$prime$prime() {

      };
      PeriodicOsc$prime$prime.value = new PeriodicOsc$prime$prime();
      return PeriodicOsc$prime$prime;
  })();
  var WaveShaper$prime$prime = (function () {
      function WaveShaper$prime$prime() {

      };
      WaveShaper$prime$prime.value = new WaveShaper$prime$prime();
      return WaveShaper$prime$prime;
  })();
  var Dup$prime$prime = (function () {
      function Dup$prime$prime() {

      };
      Dup$prime$prime.value = new Dup$prime$prime();
      return Dup$prime$prime;
  })();
  var SinOsc$prime$prime = (function () {
      function SinOsc$prime$prime() {

      };
      SinOsc$prime$prime.value = new SinOsc$prime$prime();
      return SinOsc$prime$prime;
  })();
  var SquareOsc$prime$prime = (function () {
      function SquareOsc$prime$prime() {

      };
      SquareOsc$prime$prime.value = new SquareOsc$prime$prime();
      return SquareOsc$prime$prime;
  })();
  var Splitter$prime$prime = (function () {
      function Splitter$prime$prime() {

      };
      Splitter$prime$prime.value = new Splitter$prime$prime();
      return Splitter$prime$prime;
  })();
  var StereoPanner$prime$prime = (function () {
      function StereoPanner$prime$prime() {

      };
      StereoPanner$prime$prime.value = new StereoPanner$prime$prime();
      return StereoPanner$prime$prime;
  })();
  var Mul$prime$prime = (function () {
      function Mul$prime$prime() {

      };
      Mul$prime$prime.value = new Mul$prime$prime();
      return Mul$prime$prime;
  })();
  var Add$prime$prime = (function () {
      function Add$prime$prime() {

      };
      Add$prime$prime.value = new Add$prime$prime();
      return Add$prime$prime;
  })();
  var Swap$prime$prime = (function () {
      function Swap$prime$prime() {

      };
      Swap$prime$prime.value = new Swap$prime$prime();
      return Swap$prime$prime;
  })();
  var Merger$prime$prime = (function () {
      function Merger$prime$prime() {

      };
      Merger$prime$prime.value = new Merger$prime$prime();
      return Merger$prime$prime;
  })();
  var Constant$prime$prime = (function () {
      function Constant$prime$prime() {

      };
      Constant$prime$prime.value = new Constant$prime$prime();
      return Constant$prime$prime;
  })();
  var Delay$prime$prime = (function () {
      function Delay$prime$prime() {

      };
      Delay$prime$prime.value = new Delay$prime$prime();
      return Delay$prime$prime;
  })();
  var Gain$prime$prime = (function () {
      function Gain$prime$prime() {

      };
      Gain$prime$prime.value = new Gain$prime$prime();
      return Gain$prime$prime;
  })();
  var Speaker$prime$prime = (function () {
      function Speaker$prime$prime() {

      };
      Speaker$prime$prime.value = new Speaker$prime$prime();
      return Speaker$prime$prime;
  })();
  var NoSound$prime$prime = (function () {
      function NoSound$prime$prime() {

      };
      NoSound$prime$prime.value = new NoSound$prime$prime();
      return NoSound$prime$prime;
  })();
  var SplitRes$prime$prime = (function () {
      function SplitRes$prime$prime() {

      };
      SplitRes$prime$prime.value = new SplitRes$prime$prime();
      return SplitRes$prime$prime;
  })();
  var DupRes$prime$prime = (function () {
      function DupRes$prime$prime() {

      };
      DupRes$prime$prime.value = new DupRes$prime$prime();
      return DupRes$prime$prime;
  })();
  var Stop = (function () {
      function Stop(value0) {
          this.value0 = value0;
      };
      Stop.create = function (value0) {
          return new Stop(value0);
      };
      return Stop;
  })();
  var DisconnectFrom = (function () {
      function DisconnectFrom(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DisconnectFrom.create = function (value0) {
          return function (value1) {
              return new DisconnectFrom(value0, value1);
          };
      };
      return DisconnectFrom;
  })();
  var ConnectTo = (function () {
      function ConnectTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ConnectTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ConnectTo(value0, value1, value2);
              };
          };
      };
      return ConnectTo;
  })();
  var Shuffle = (function () {
      function Shuffle(value0) {
          this.value0 = value0;
      };
      Shuffle.create = function (value0) {
          return new Shuffle(value0);
      };
      return Shuffle;
  })();
  var NewUnit = (function () {
      function NewUnit(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      NewUnit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new NewUnit(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return NewUnit;
  })();
  var SetFrequency = (function () {
      function SetFrequency(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetFrequency.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetFrequency(value0, value1, value2);
              };
          };
      };
      return SetFrequency;
  })();
  var SetThreshold = (function () {
      function SetThreshold(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetThreshold.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetThreshold(value0, value1, value2);
              };
          };
      };
      return SetThreshold;
  })();
  var SetKnee = (function () {
      function SetKnee(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetKnee.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetKnee(value0, value1, value2);
              };
          };
      };
      return SetKnee;
  })();
  var SetRatio = (function () {
      function SetRatio(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetRatio.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetRatio(value0, value1, value2);
              };
          };
      };
      return SetRatio;
  })();
  var SetAttack = (function () {
      function SetAttack(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetAttack.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetAttack(value0, value1, value2);
              };
          };
      };
      return SetAttack;
  })();
  var SetRelease = (function () {
      function SetRelease(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetRelease.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetRelease(value0, value1, value2);
              };
          };
      };
      return SetRelease;
  })();
  var SetBuffer = (function () {
      function SetBuffer(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetBuffer.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetBuffer(value0, value1, value2);
              };
          };
      };
      return SetBuffer;
  })();
  var SetQ = (function () {
      function SetQ(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetQ.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetQ(value0, value1, value2);
              };
          };
      };
      return SetQ;
  })();
  var SetPlaybackRate = (function () {
      function SetPlaybackRate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetPlaybackRate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetPlaybackRate(value0, value1, value2);
              };
          };
      };
      return SetPlaybackRate;
  })();
  var SetPeriodicWave = (function () {
      function SetPeriodicWave(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetPeriodicWave.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetPeriodicWave(value0, value1, value2);
              };
          };
      };
      return SetPeriodicWave;
  })();
  var SetCurve = (function () {
      function SetCurve(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetCurve.create = function (value0) {
          return function (value1) {
              return new SetCurve(value0, value1);
          };
      };
      return SetCurve;
  })();
  var SetOversample = (function () {
      function SetOversample(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetOversample.create = function (value0) {
          return function (value1) {
              return new SetOversample(value0, value1);
          };
      };
      return SetOversample;
  })();
  var SetLoopStart = (function () {
      function SetLoopStart(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLoopStart.create = function (value0) {
          return function (value1) {
              return new SetLoopStart(value0, value1);
          };
      };
      return SetLoopStart;
  })();
  var SetLoopEnd = (function () {
      function SetLoopEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLoopEnd.create = function (value0) {
          return function (value1) {
              return new SetLoopEnd(value0, value1);
          };
      };
      return SetLoopEnd;
  })();
  var SetPan = (function () {
      function SetPan(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetPan.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetPan(value0, value1, value2);
              };
          };
      };
      return SetPan;
  })();
  var SetGain = (function () {
      function SetGain(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetGain.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetGain(value0, value1, value2);
              };
          };
      };
      return SetGain;
  })();
  var SetDelay = (function () {
      function SetDelay(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetDelay.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetDelay(value0, value1, value2);
              };
          };
      };
      return SetDelay;
  })();
  var SetOffset = (function () {
      function SetOffset(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetOffset.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetOffset(value0, value1, value2);
              };
          };
      };
      return SetOffset;
  })();
  var SetCustomParam = (function () {
      function SetCustomParam(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      SetCustomParam.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new SetCustomParam(value0, value1, value2, value3);
                  };
              };
          };
      };
      return SetCustomParam;
  })();
  var Microphone$prime = (function () {
      function Microphone$prime() {

      };
      Microphone$prime.value = new Microphone$prime();
      return Microphone$prime;
  })();
  var AudioWorkletGenerator$prime = (function () {
      function AudioWorkletGenerator$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AudioWorkletGenerator$prime.create = function (value0) {
          return function (value1) {
              return new AudioWorkletGenerator$prime(value0, value1);
          };
      };
      return AudioWorkletGenerator$prime;
  })();
  var AudioWorkletProcessor$prime = (function () {
      function AudioWorkletProcessor$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AudioWorkletProcessor$prime.create = function (value0) {
          return function (value1) {
              return new AudioWorkletProcessor$prime(value0, value1);
          };
      };
      return AudioWorkletProcessor$prime;
  })();
  var AudioWorkletAggregator$prime = (function () {
      function AudioWorkletAggregator$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AudioWorkletAggregator$prime.create = function (value0) {
          return function (value1) {
              return new AudioWorkletAggregator$prime(value0, value1);
          };
      };
      return AudioWorkletAggregator$prime;
  })();
  var Play$prime = (function () {
      function Play$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Play$prime.create = function (value0) {
          return function (value1) {
              return new Play$prime(value0, value1);
          };
      };
      return Play$prime;
  })();
  var PlayBuf$prime = (function () {
      function PlayBuf$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PlayBuf$prime.create = function (value0) {
          return function (value1) {
              return new PlayBuf$prime(value0, value1);
          };
      };
      return PlayBuf$prime;
  })();
  var LoopBuf$prime = (function () {
      function LoopBuf$prime(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      LoopBuf$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new LoopBuf$prime(value0, value1, value2, value3);
                  };
              };
          };
      };
      return LoopBuf$prime;
  })();
  var Lowpass$prime = (function () {
      function Lowpass$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lowpass$prime.create = function (value0) {
          return function (value1) {
              return new Lowpass$prime(value0, value1);
          };
      };
      return Lowpass$prime;
  })();
  var Highpass$prime = (function () {
      function Highpass$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Highpass$prime.create = function (value0) {
          return function (value1) {
              return new Highpass$prime(value0, value1);
          };
      };
      return Highpass$prime;
  })();
  var Bandpass$prime = (function () {
      function Bandpass$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bandpass$prime.create = function (value0) {
          return function (value1) {
              return new Bandpass$prime(value0, value1);
          };
      };
      return Bandpass$prime;
  })();
  var Lowshelf$prime = (function () {
      function Lowshelf$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lowshelf$prime.create = function (value0) {
          return function (value1) {
              return new Lowshelf$prime(value0, value1);
          };
      };
      return Lowshelf$prime;
  })();
  var Highshelf$prime = (function () {
      function Highshelf$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Highshelf$prime.create = function (value0) {
          return function (value1) {
              return new Highshelf$prime(value0, value1);
          };
      };
      return Highshelf$prime;
  })();
  var Peaking$prime = (function () {
      function Peaking$prime(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Peaking$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Peaking$prime(value0, value1, value2);
              };
          };
      };
      return Peaking$prime;
  })();
  var Notch$prime = (function () {
      function Notch$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Notch$prime.create = function (value0) {
          return function (value1) {
              return new Notch$prime(value0, value1);
          };
      };
      return Notch$prime;
  })();
  var Allpass$prime = (function () {
      function Allpass$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Allpass$prime.create = function (value0) {
          return function (value1) {
              return new Allpass$prime(value0, value1);
          };
      };
      return Allpass$prime;
  })();
  var Convolver$prime = (function () {
      function Convolver$prime(value0) {
          this.value0 = value0;
      };
      Convolver$prime.create = function (value0) {
          return new Convolver$prime(value0);
      };
      return Convolver$prime;
  })();
  var DynamicsCompressor$prime = (function () {
      function DynamicsCompressor$prime(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      DynamicsCompressor$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new DynamicsCompressor$prime(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return DynamicsCompressor$prime;
  })();
  var SawtoothOsc$prime = (function () {
      function SawtoothOsc$prime(value0) {
          this.value0 = value0;
      };
      SawtoothOsc$prime.create = function (value0) {
          return new SawtoothOsc$prime(value0);
      };
      return SawtoothOsc$prime;
  })();
  var TriangleOsc$prime = (function () {
      function TriangleOsc$prime(value0) {
          this.value0 = value0;
      };
      TriangleOsc$prime.create = function (value0) {
          return new TriangleOsc$prime(value0);
      };
      return TriangleOsc$prime;
  })();
  var PeriodicOsc$prime = (function () {
      function PeriodicOsc$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PeriodicOsc$prime.create = function (value0) {
          return function (value1) {
              return new PeriodicOsc$prime(value0, value1);
          };
      };
      return PeriodicOsc$prime;
  })();
  var WaveShaper$prime = (function () {
      function WaveShaper$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WaveShaper$prime.create = function (value0) {
          return function (value1) {
              return new WaveShaper$prime(value0, value1);
          };
      };
      return WaveShaper$prime;
  })();
  var Dup$prime = (function () {
      function Dup$prime() {

      };
      Dup$prime.value = new Dup$prime();
      return Dup$prime;
  })();
  var SinOsc$prime = (function () {
      function SinOsc$prime(value0) {
          this.value0 = value0;
      };
      SinOsc$prime.create = function (value0) {
          return new SinOsc$prime(value0);
      };
      return SinOsc$prime;
  })();
  var SquareOsc$prime = (function () {
      function SquareOsc$prime(value0) {
          this.value0 = value0;
      };
      SquareOsc$prime.create = function (value0) {
          return new SquareOsc$prime(value0);
      };
      return SquareOsc$prime;
  })();
  var Splitter$prime = (function () {
      function Splitter$prime(value0) {
          this.value0 = value0;
      };
      Splitter$prime.create = function (value0) {
          return new Splitter$prime(value0);
      };
      return Splitter$prime;
  })();
  var StereoPanner$prime = (function () {
      function StereoPanner$prime(value0) {
          this.value0 = value0;
      };
      StereoPanner$prime.create = function (value0) {
          return new StereoPanner$prime(value0);
      };
      return StereoPanner$prime;
  })();
  var Mul$prime = (function () {
      function Mul$prime() {

      };
      Mul$prime.value = new Mul$prime();
      return Mul$prime;
  })();
  var Add$prime = (function () {
      function Add$prime() {

      };
      Add$prime.value = new Add$prime();
      return Add$prime;
  })();
  var Swap$prime = (function () {
      function Swap$prime() {

      };
      Swap$prime.value = new Swap$prime();
      return Swap$prime;
  })();
  var Merger$prime = (function () {
      function Merger$prime(value0) {
          this.value0 = value0;
      };
      Merger$prime.create = function (value0) {
          return new Merger$prime(value0);
      };
      return Merger$prime;
  })();
  var Constant$prime = (function () {
      function Constant$prime(value0) {
          this.value0 = value0;
      };
      Constant$prime.create = function (value0) {
          return new Constant$prime(value0);
      };
      return Constant$prime;
  })();
  var Delay$prime = (function () {
      function Delay$prime(value0) {
          this.value0 = value0;
      };
      Delay$prime.create = function (value0) {
          return new Delay$prime(value0);
      };
      return Delay$prime;
  })();
  var Gain$prime = (function () {
      function Gain$prime(value0) {
          this.value0 = value0;
      };
      Gain$prime.create = function (value0) {
          return new Gain$prime(value0);
      };
      return Gain$prime;
  })();
  var Speaker$prime = (function () {
      function Speaker$prime() {

      };
      Speaker$prime.value = new Speaker$prime();
      return Speaker$prime;
  })();
  var NoSound$prime = (function () {
      function NoSound$prime() {

      };
      NoSound$prime.value = new NoSound$prime();
      return NoSound$prime;
  })();
  var SplitRes$prime = (function () {
      function SplitRes$prime(value0) {
          this.value0 = value0;
      };
      SplitRes$prime.create = function (value0) {
          return new SplitRes$prime(value0);
      };
      return SplitRes$prime;
  })();
  var DupRes$prime = (function () {
      function DupRes$prime() {

      };
      DupRes$prime.value = new DupRes$prime();
      return DupRes$prime;
  })();
  var GAudioWorkletProcessor = (function () {
      function GAudioWorkletProcessor(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GAudioWorkletProcessor.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GAudioWorkletProcessor(value0, value1, value2);
              };
          };
      };
      return GAudioWorkletProcessor;
  })();
  var GLowpass = (function () {
      function GLowpass(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GLowpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GLowpass(value0, value1, value2);
              };
          };
      };
      return GLowpass;
  })();
  var GHighpass = (function () {
      function GHighpass(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GHighpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GHighpass(value0, value1, value2);
              };
          };
      };
      return GHighpass;
  })();
  var GBandpass = (function () {
      function GBandpass(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GBandpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GBandpass(value0, value1, value2);
              };
          };
      };
      return GBandpass;
  })();
  var GLowshelf = (function () {
      function GLowshelf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GLowshelf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GLowshelf(value0, value1, value2);
              };
          };
      };
      return GLowshelf;
  })();
  var GHighshelf = (function () {
      function GHighshelf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GHighshelf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GHighshelf(value0, value1, value2);
              };
          };
      };
      return GHighshelf;
  })();
  var GPeaking = (function () {
      function GPeaking(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      GPeaking.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new GPeaking(value0, value1, value2, value3);
                  };
              };
          };
      };
      return GPeaking;
  })();
  var GNotch = (function () {
      function GNotch(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GNotch.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GNotch(value0, value1, value2);
              };
          };
      };
      return GNotch;
  })();
  var GAllpass = (function () {
      function GAllpass(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GAllpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GAllpass(value0, value1, value2);
              };
          };
      };
      return GAllpass;
  })();
  var GConvolver = (function () {
      function GConvolver(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GConvolver.create = function (value0) {
          return function (value1) {
              return new GConvolver(value0, value1);
          };
      };
      return GConvolver;
  })();
  var GDynamicsCompressor = (function () {
      function GDynamicsCompressor(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      GDynamicsCompressor.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new GDynamicsCompressor(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return GDynamicsCompressor;
  })();
  var GWaveShaper = (function () {
      function GWaveShaper(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GWaveShaper.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GWaveShaper(value0, value1, value2);
              };
          };
      };
      return GWaveShaper;
  })();
  var GStereoPanner = (function () {
      function GStereoPanner(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GStereoPanner.create = function (value0) {
          return function (value1) {
              return new GStereoPanner(value0, value1);
          };
      };
      return GStereoPanner;
  })();
  var GDelay = (function () {
      function GDelay(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GDelay.create = function (value0) {
          return function (value1) {
              return new GDelay(value0, value1);
          };
      };
      return GDelay;
  })();
  var GAudioWorkletAggregator = (function () {
      function GAudioWorkletAggregator(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      GAudioWorkletAggregator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new GAudioWorkletAggregator(value0, value1, value2);
              };
          };
      };
      return GAudioWorkletAggregator;
  })();
  var GMul = (function () {
      function GMul(value0) {
          this.value0 = value0;
      };
      GMul.create = function (value0) {
          return new GMul(value0);
      };
      return GMul;
  })();
  var GAdd = (function () {
      function GAdd(value0) {
          this.value0 = value0;
      };
      GAdd.create = function (value0) {
          return new GAdd(value0);
      };
      return GAdd;
  })();
  var GGain = (function () {
      function GGain(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GGain.create = function (value0) {
          return function (value1) {
              return new GGain(value0, value1);
          };
      };
      return GGain;
  })();
  var Microphone = (function () {
      function Microphone(value0) {
          this.value0 = value0;
      };
      Microphone.create = function (value0) {
          return new Microphone(value0);
      };
      return Microphone;
  })();
  var AudioWorkletGenerator = (function () {
      function AudioWorkletGenerator(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      AudioWorkletGenerator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new AudioWorkletGenerator(value0, value1, value2);
              };
          };
      };
      return AudioWorkletGenerator;
  })();
  var AudioWorkletProcessor = (function () {
      function AudioWorkletProcessor(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      AudioWorkletProcessor.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new AudioWorkletProcessor(value0, value1, value2, value3);
                  };
              };
          };
      };
      return AudioWorkletProcessor;
  })();
  var AudioWorkletAggregator = (function () {
      function AudioWorkletAggregator(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      AudioWorkletAggregator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new AudioWorkletAggregator(value0, value1, value2, value3);
                  };
              };
          };
      };
      return AudioWorkletAggregator;
  })();
  var Play = (function () {
      function Play(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Play.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Play(value0, value1, value2);
              };
          };
      };
      return Play;
  })();
  var PlayBuf = (function () {
      function PlayBuf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PlayBuf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PlayBuf(value0, value1, value2);
              };
          };
      };
      return PlayBuf;
  })();
  var LoopBuf = (function () {
      function LoopBuf(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      LoopBuf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new LoopBuf(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return LoopBuf;
  })();
  var Lowpass = (function () {
      function Lowpass(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Lowpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Lowpass(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Lowpass;
  })();
  var Highpass = (function () {
      function Highpass(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Highpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Highpass(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Highpass;
  })();
  var Bandpass = (function () {
      function Bandpass(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Bandpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Bandpass(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Bandpass;
  })();
  var Lowshelf = (function () {
      function Lowshelf(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Lowshelf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Lowshelf(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Lowshelf;
  })();
  var Highshelf = (function () {
      function Highshelf(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Highshelf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Highshelf(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Highshelf;
  })();
  var Peaking = (function () {
      function Peaking(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Peaking.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Peaking(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Peaking;
  })();
  var Notch = (function () {
      function Notch(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Notch.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Notch(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Notch;
  })();
  var Allpass = (function () {
      function Allpass(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Allpass.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Allpass(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Allpass;
  })();
  var Convolver = (function () {
      function Convolver(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Convolver.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Convolver(value0, value1, value2);
              };
          };
      };
      return Convolver;
  })();
  var DynamicsCompressor = (function () {
      function DynamicsCompressor(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      DynamicsCompressor.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new DynamicsCompressor(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return DynamicsCompressor;
  })();
  var SawtoothOsc = (function () {
      function SawtoothOsc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SawtoothOsc.create = function (value0) {
          return function (value1) {
              return new SawtoothOsc(value0, value1);
          };
      };
      return SawtoothOsc;
  })();
  var TriangleOsc = (function () {
      function TriangleOsc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TriangleOsc.create = function (value0) {
          return function (value1) {
              return new TriangleOsc(value0, value1);
          };
      };
      return TriangleOsc;
  })();
  var PeriodicOsc = (function () {
      function PeriodicOsc(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PeriodicOsc.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PeriodicOsc(value0, value1, value2);
              };
          };
      };
      return PeriodicOsc;
  })();
  var WaveShaper = (function () {
      function WaveShaper(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      WaveShaper.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new WaveShaper(value0, value1, value2, value3);
                  };
              };
          };
      };
      return WaveShaper;
  })();
  var Dup1 = (function () {
      function Dup1(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dup1.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dup1(value0, value1, value2);
              };
          };
      };
      return Dup1;
  })();
  var Dup2 = (function () {
      function Dup2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dup2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dup2(value0, value1, value2);
              };
          };
      };
      return Dup2;
  })();
  var Dup3 = (function () {
      function Dup3(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dup3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dup3(value0, value1, value2);
              };
          };
      };
      return Dup3;
  })();
  var Dup4 = (function () {
      function Dup4(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dup4.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dup4(value0, value1, value2);
              };
          };
      };
      return Dup4;
  })();
  var Dup5 = (function () {
      function Dup5(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dup5.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dup5(value0, value1, value2);
              };
          };
      };
      return Dup5;
  })();
  var SinOsc = (function () {
      function SinOsc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SinOsc.create = function (value0) {
          return function (value1) {
              return new SinOsc(value0, value1);
          };
      };
      return SinOsc;
  })();
  var SquareOsc = (function () {
      function SquareOsc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SquareOsc.create = function (value0) {
          return function (value1) {
              return new SquareOsc(value0, value1);
          };
      };
      return SquareOsc;
  })();
  var Split1 = (function () {
      function Split1(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split1.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split1(value0, value1, value2);
              };
          };
      };
      return Split1;
  })();
  var Split2 = (function () {
      function Split2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split2(value0, value1, value2);
              };
          };
      };
      return Split2;
  })();
  var Split3 = (function () {
      function Split3(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split3(value0, value1, value2);
              };
          };
      };
      return Split3;
  })();
  var Split4 = (function () {
      function Split4(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split4.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split4(value0, value1, value2);
              };
          };
      };
      return Split4;
  })();
  var Split5 = (function () {
      function Split5(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split5.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split5(value0, value1, value2);
              };
          };
      };
      return Split5;
  })();
  var StereoPanner = (function () {
      function StereoPanner(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StereoPanner.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StereoPanner(value0, value1, value2);
              };
          };
      };
      return StereoPanner;
  })();
  var Mul = (function () {
      function Mul(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Mul.create = function (value0) {
          return function (value1) {
              return new Mul(value0, value1);
          };
      };
      return Mul;
  })();
  var Add = (function () {
      function Add(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Add.create = function (value0) {
          return function (value1) {
              return new Add(value0, value1);
          };
      };
      return Add;
  })();
  var Merger = (function () {
      function Merger(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Merger.create = function (value0) {
          return function (value1) {
              return new Merger(value0, value1);
          };
      };
      return Merger;
  })();
  var Constant = (function () {
      function Constant(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Constant.create = function (value0) {
          return function (value1) {
              return new Constant(value0, value1);
          };
      };
      return Constant;
  })();
  var Delay = (function () {
      function Delay(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Delay.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Delay(value0, value1, value2);
              };
          };
      };
      return Delay;
  })();
  var Gain = (function () {
      function Gain(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Gain.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Gain(value0, value1, value2);
              };
          };
      };
      return Gain;
  })();
  var Speaker = (function () {
      function Speaker(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Speaker.create = function (value0) {
          return function (value1) {
              return new Speaker(value0, value1);
          };
      };
      return Speaker;
  })();
  var NoSound = (function () {
      function NoSound(value0) {
          this.value0 = value0;
      };
      NoSound.create = function (value0) {
          return new NoSound(value0);
      };
      return NoSound;
  })();
  var Graph = (function () {
      function Graph(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Graph.create = function (value0) {
          return function (value1) {
              return new Graph(value0, value1);
          };
      };
      return Graph;
  })();
  var SplitRes = (function () {
      function SplitRes(value0) {
          this.value0 = value0;
      };
      SplitRes.create = function (value0) {
          return new SplitRes(value0);
      };
      return SplitRes;
  })();
  var DupRes = (function () {
      function DupRes() {

      };
      DupRes.value = new DupRes();
      return DupRes;
  })();
  var AV = (function () {
      function AV(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      AV.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new AV(value0, value1, value2);
              };
          };
      };
      return AV;
  })();                    
  var RunnableMedia = function (runInBrowser) {
      this.runInBrowser = runInBrowser;
  };
  var ucomp = function (v) {
      return function (v1) {
          if (v instanceof Microphone$prime && v1 instanceof Microphone$prime) {
              return true;
          };
          if (v instanceof AudioWorkletGenerator$prime && v1 instanceof AudioWorkletGenerator$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof AudioWorkletProcessor$prime && v1 instanceof AudioWorkletProcessor$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof AudioWorkletAggregator$prime && v1 instanceof AudioWorkletAggregator$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Play$prime && v1 instanceof Play$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof PlayBuf$prime && v1 instanceof PlayBuf$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof LoopBuf$prime && v1 instanceof LoopBuf$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Lowpass$prime && v1 instanceof Lowpass$prime) {
              return true;
          };
          if (v instanceof Highpass$prime && v1 instanceof Highpass$prime) {
              return true;
          };
          if (v instanceof Bandpass$prime && v1 instanceof Bandpass$prime) {
              return true;
          };
          if (v instanceof Lowshelf$prime && v1 instanceof Lowshelf$prime) {
              return true;
          };
          if (v instanceof Highshelf$prime && v1 instanceof Highshelf$prime) {
              return true;
          };
          if (v instanceof Peaking$prime && v1 instanceof Peaking$prime) {
              return true;
          };
          if (v instanceof Notch$prime && v1 instanceof Notch$prime) {
              return true;
          };
          if (v instanceof Allpass$prime && v1 instanceof Allpass$prime) {
              return true;
          };
          if (v instanceof Convolver$prime && v1 instanceof Convolver$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof DynamicsCompressor$prime && v1 instanceof DynamicsCompressor$prime) {
              return true;
          };
          if (v instanceof SawtoothOsc$prime && v1 instanceof SawtoothOsc$prime) {
              return true;
          };
          if (v instanceof TriangleOsc$prime && v1 instanceof TriangleOsc$prime) {
              return true;
          };
          if (v instanceof PeriodicOsc$prime && v1 instanceof PeriodicOsc$prime) {
              return v.value1 === v1.value1;
          };
          if (v instanceof WaveShaper$prime && v1 instanceof WaveShaper$prime) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Dup$prime && v1 instanceof Dup$prime) {
              return true;
          };
          if (v instanceof SinOsc$prime && v1 instanceof SinOsc$prime) {
              return true;
          };
          if (v instanceof SquareOsc$prime && v1 instanceof SquareOsc$prime) {
              return true;
          };
          if (v instanceof Splitter$prime && v1 instanceof Splitter$prime) {
              return true;
          };
          if (v instanceof StereoPanner$prime && v1 instanceof StereoPanner$prime) {
              return true;
          };
          if (v instanceof Mul$prime && v1 instanceof Mul$prime) {
              return true;
          };
          if (v instanceof Add$prime && v1 instanceof Add$prime) {
              return true;
          };
          if (v instanceof Swap$prime && v1 instanceof Swap$prime) {
              return true;
          };
          if (v instanceof Merger$prime && v1 instanceof Merger$prime) {
              return true;
          };
          if (v instanceof Constant$prime && v1 instanceof Constant$prime) {
              return true;
          };
          if (v instanceof Delay$prime && v1 instanceof Delay$prime) {
              return true;
          };
          if (v instanceof Gain$prime && v1 instanceof Gain$prime) {
              return true;
          };
          if (v instanceof Speaker$prime && v1 instanceof Speaker$prime) {
              return true;
          };
          if (v instanceof NoSound$prime && v1 instanceof NoSound$prime) {
              return true;
          };
          if (v instanceof SplitRes$prime && v1 instanceof SplitRes$prime) {
              return true;
          };
          if (v instanceof DupRes$prime && v1 instanceof DupRes$prime) {
              return true;
          };
          return false;
      };
  };
  var speaker$prime = function (dictPos) {
      var $4175 = Speaker.create(Data_Maybe.Nothing.value);
      var $4176 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($4177) {
          return $4175($4176($4177));
      };
  };
  var sourceConstructor = function (v) {
      if (v instanceof Play$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof AudioWorkletGenerator$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof AudioWorkletProcessor$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof AudioWorkletAggregator$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof PlayBuf$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof LoopBuf$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof PeriodicOsc$prime) {
          return new Data_Maybe.Just(v.value1);
      };
      if (v instanceof WaveShaper$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Convolver$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var runInBrowser = function (dict) {
      return dict.runInBrowser;
  };
  var processors = function (dict) {
      return dict.processors;
  };                          
  var os2s = function (o) {
      if (o instanceof None) {
          return "none";
      };
      if (o instanceof TwoX) {
          return "2x";
      };
      if (o instanceof FourX) {
          return "4x";
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 4051, column 10 - line 4054, column 16): " + [ o.constructor.name ]);
  };
  var nonEmptyListLength = function (v) {
      return Data_List.length(v.value1) + 1 | 0;
  };
  var napeq = function (dictEq) {
      return function (v) {
          return function (v1) {
              return Data_Eq.notEq(dictEq)(v.param)(v1.param);
          };
      };
  };
  var mergerHack = function (v) {
      return function (v1) {
          if (v instanceof Merger$prime) {
              return new Merger$prime(new Data_List_Types.Cons(v1.value0, v1.value1));
          };
          return v;
      };
  };
  var maybeNel = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return Data_Maybe.Just.create(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 3568, column 1 - line 3568, column 56): " + [ v.constructor.name ]);
  };
  var makePeriodicWave = function (dictPos) {
      return function (ctx) {
          return function (a) {
              return function (b) {
                  return $foreign.makePeriodicWaveImpl(ctx)(Data_Vec.toArray(a))(Data_Vec.toArray(b));
              };
          };
      };
  };
  var isWaveShaper_ = function (v) {
      if (v instanceof WaveShaper$prime$prime) {
          return true;
      };
      return false;
  };
  var isTriangleOsc_ = function (v) {
      if (v instanceof TriangleOsc$prime$prime) {
          return true;
      };
      return false;
  };
  var isSwap_ = function (v) {
      if (v instanceof Swap$prime$prime) {
          return true;
      };
      return false;
  };
  var isStop_ = function (v) {
      if (v instanceof Stop) {
          return true;
      };
      return false;
  };
  var isStereoPanner_ = function (v) {
      if (v instanceof StereoPanner$prime$prime) {
          return true;
      };
      return false;
  };
  var isSquareOsc_ = function (v) {
      if (v instanceof SquareOsc$prime$prime) {
          return true;
      };
      return false;
  };
  var isSplitter_ = function (v) {
      if (v instanceof Splitter$prime$prime) {
          return true;
      };
      return false;
  };
  var isSplitRes_ = function (v) {
      if (v instanceof SplitRes$prime$prime) {
          return true;
      };
      return false;
  };
  var isSplitRes$prime = function (v) {
      if (v instanceof SplitRes$prime) {
          return true;
      };
      return false;
  };
  var splitResGetImpetus = function (dictOrd) {
      return function (dictOrd1) {
          return function (s) {
              return Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd)(Data_Map_Internal.values(Data_Functor.map(Data_Map_Internal.functorMap)(function (v) {
                  return v.ptr;
              })(Data_Map_Internal.filter(dictOrd1)(function (i) {
                  return isSplitRes$prime(i.au) && Data_Set.size(i.prev) === 0;
              })(s.flat))));
          };
      };
  };
  var isSpeaker_ = function (v) {
      if (v instanceof Speaker$prime$prime) {
          return true;
      };
      return false;
  };
  var isSinOsc_ = function (v) {
      if (v instanceof SinOsc$prime$prime) {
          return true;
      };
      return false;
  };
  var isShuffle_ = function (v) {
      if (v instanceof Shuffle) {
          return true;
      };
      return false;
  };
  var isSetThreshold_ = function (v) {
      if (v instanceof SetThreshold) {
          return true;
      };
      return false;
  };
  var isSetRelease_ = function (v) {
      if (v instanceof SetRelease) {
          return true;
      };
      return false;
  };
  var isSetRatio_ = function (v) {
      if (v instanceof SetRatio) {
          return true;
      };
      return false;
  };
  var isSetQ_ = function (v) {
      if (v instanceof SetQ) {
          return true;
      };
      return false;
  };
  var isSetPlaybackRate_ = function (v) {
      if (v instanceof SetPlaybackRate) {
          return true;
      };
      return false;
  };
  var isSetPeriodicWave_ = function (v) {
      if (v instanceof SetPeriodicWave) {
          return true;
      };
      return false;
  };
  var isSetPan_ = function (v) {
      if (v instanceof SetPan) {
          return true;
      };
      return false;
  };
  var isSetOversample_ = function (v) {
      if (v instanceof SetOversample) {
          return true;
      };
      return false;
  };
  var isSetOffset_ = function (v) {
      if (v instanceof SetOffset) {
          return true;
      };
      return false;
  };
  var isSetLoopStart_ = function (v) {
      if (v instanceof SetLoopStart) {
          return true;
      };
      return false;
  };
  var isSetLoopEnd_ = function (v) {
      if (v instanceof SetLoopEnd) {
          return true;
      };
      return false;
  };
  var isSetKnee_ = function (v) {
      if (v instanceof SetKnee) {
          return true;
      };
      return false;
  };
  var isSetGain_ = function (v) {
      if (v instanceof SetGain) {
          return true;
      };
      return false;
  };
  var isSetFrequency_ = function (v) {
      if (v instanceof SetFrequency) {
          return true;
      };
      return false;
  };
  var isSetDelay_ = function (v) {
      if (v instanceof SetDelay) {
          return true;
      };
      return false;
  };
  var isSetCustomParam_ = function (v) {
      if (v instanceof SetCustomParam) {
          return true;
      };
      return false;
  };
  var isSetCurve_ = function (v) {
      if (v instanceof SetCurve) {
          return true;
      };
      return false;
  };
  var isSetBuffer_ = function (v) {
      if (v instanceof SetBuffer) {
          return true;
      };
      return false;
  };
  var isSetAttack_ = function (v) {
      if (v instanceof SetAttack) {
          return true;
      };
      return false;
  };
  var isSawtoothOsc_ = function (v) {
      if (v instanceof SawtoothOsc$prime$prime) {
          return true;
      };
      return false;
  };
  var isPlay_ = function (v) {
      if (v instanceof Play$prime$prime) {
          return true;
      };
      return false;
  };
  var isPlayBuf_ = function (v) {
      if (v instanceof PlayBuf$prime$prime) {
          return true;
      };
      return false;
  };
  var isPeriodicOsc_ = function (v) {
      if (v instanceof PeriodicOsc$prime$prime) {
          return true;
      };
      return false;
  };
  var isPeaking_ = function (v) {
      if (v instanceof Peaking$prime$prime) {
          return true;
      };
      return false;
  };
  var isNotch_ = function (v) {
      if (v instanceof Notch$prime$prime) {
          return true;
      };
      return false;
  };
  var isNoSound_ = function (v) {
      if (v instanceof NoSound$prime$prime) {
          return true;
      };
      return false;
  };
  var isNewUnit_ = function (v) {
      if (v instanceof NewUnit) {
          return true;
      };
      return false;
  };
  var isMul_ = function (v) {
      if (v instanceof Mul$prime$prime) {
          return true;
      };
      return false;
  };
  var isMicrophone_ = function (v) {
      if (v instanceof Microphone$prime$prime) {
          return true;
      };
      return false;
  };
  var isMerger_ = function (v) {
      if (v instanceof Merger$prime$prime) {
          return true;
      };
      return false;
  };
  var isLowshelf_ = function (v) {
      if (v instanceof Lowshelf$prime$prime) {
          return true;
      };
      return false;
  };
  var isLowpass_ = function (v) {
      if (v instanceof Lowpass$prime$prime) {
          return true;
      };
      return false;
  };
  var isLoopBuf_ = function (v) {
      if (v instanceof LoopBuf$prime$prime) {
          return true;
      };
      return false;
  };
  var isHighshelf_ = function (v) {
      if (v instanceof Highshelf$prime$prime) {
          return true;
      };
      return false;
  };
  var isHighpass_ = function (v) {
      if (v instanceof Highpass$prime$prime) {
          return true;
      };
      return false;
  };
  var isGen = function (v) {
      if (v instanceof Microphone$prime) {
          return true;
      };
      if (v instanceof PlayBuf$prime) {
          return true;
      };
      if (v instanceof LoopBuf$prime) {
          return true;
      };
      if (v instanceof SawtoothOsc$prime) {
          return true;
      };
      if (v instanceof TriangleOsc$prime) {
          return true;
      };
      if (v instanceof PeriodicOsc$prime) {
          return true;
      };
      if (v instanceof SinOsc$prime) {
          return true;
      };
      if (v instanceof SquareOsc$prime) {
          return true;
      };
      if (v instanceof Constant$prime) {
          return true;
      };
      return false;
  };
  var isGain_ = function (v) {
      if (v instanceof Gain$prime$prime) {
          return true;
      };
      return false;
  };
  var isDynamicsCompressor_ = function (v) {
      if (v instanceof DynamicsCompressor$prime$prime) {
          return true;
      };
      return false;
  };
  var isDup_ = function (v) {
      if (v instanceof Dup$prime$prime) {
          return true;
      };
      return false;
  };
  var isDupRes_ = function (v) {
      if (v instanceof DupRes$prime$prime) {
          return true;
      };
      return false;
  };
  var isDisconnectFrom_ = function (v) {
      if (v instanceof DisconnectFrom) {
          return true;
      };
      return false;
  };
  var isDelay_ = function (v) {
      if (v instanceof Delay$prime$prime) {
          return true;
      };
      return false;
  };
  var isConvolver_ = function (v) {
      if (v instanceof Convolver$prime$prime) {
          return true;
      };
      return false;
  };
  var isConstant_ = function (v) {
      if (v instanceof Constant$prime$prime) {
          return true;
      };
      return false;
  };
  var isConnectTo_ = function (v) {
      if (v instanceof ConnectTo) {
          return true;
      };
      return false;
  };
  var isBandpass_ = function (v) {
      if (v instanceof Bandpass$prime$prime) {
          return true;
      };
      return false;
  };
  var isAudioWorkletProcessor_ = function (v) {
      if (v instanceof AudioWorkletProcessor$prime$prime) {
          return true;
      };
      return false;
  };
  var isAudioWorkletGenerator_ = function (v) {
      if (v instanceof AudioWorkletGenerator$prime$prime) {
          return true;
      };
      return false;
  };
  var isAudioWorkletAggregator_ = function (v) {
      if (v instanceof AudioWorkletAggregator$prime$prime) {
          return true;
      };
      return false;
  };
  var isAllpass_ = function (v) {
      if (v instanceof Allpass$prime$prime) {
          return true;
      };
      return false;
  };
  var isAdd_ = function (v) {
      if (v instanceof Add$prime$prime) {
          return true;
      };
      return false;
  };
  var toFFI = {
      justly: Data_Maybe.Just.create,
      tupply: Data_Tuple.Tuple.create,
      isNothing: Data_Maybe.isNothing,
      isMicrophone: isMicrophone_,
      isAudioWorkletGenerator: isAudioWorkletGenerator_,
      isAudioWorkletProcessor: isAudioWorkletProcessor_,
      isAudioWorkletAggregator: isAudioWorkletAggregator_,
      isPlay: isPlay_,
      isPlayBuf: isPlayBuf_,
      isLoopBuf: isLoopBuf_,
      isLowpass: isLowpass_,
      isHighpass: isHighpass_,
      isBandpass: isBandpass_,
      isLowshelf: isLowshelf_,
      isHighshelf: isHighshelf_,
      isPeaking: isPeaking_,
      isNotch: isNotch_,
      isAllpass: isAllpass_,
      isConvolver: isConvolver_,
      isDynamicsCompressor: isDynamicsCompressor_,
      isSawtoothOsc: isSawtoothOsc_,
      isTriangleOsc: isTriangleOsc_,
      isPeriodicOsc: isPeriodicOsc_,
      isWaveShaper: isWaveShaper_,
      isDup: isDup_,
      isSinOsc: isSinOsc_,
      isSquareOsc: isSquareOsc_,
      isSplitter: isSplitter_,
      isStereoPanner: isStereoPanner_,
      isMul: isMul_,
      isAdd: isAdd_,
      isSwap: isSwap_,
      isMerger: isMerger_,
      isConstant: isConstant_,
      isDelay: isDelay_,
      isGain: isGain_,
      isSpeaker: isSpeaker_,
      isNoSound: isNoSound_,
      isSplitRes: isSplitRes_,
      isDupRes: isDupRes_,
      isStop: isStop_,
      isDisconnectFrom: isDisconnectFrom_,
      isConnectTo: isConnectTo_,
      isShuffle: isShuffle_,
      isNewUnit: isNewUnit_,
      isSetFrequency: isSetFrequency_,
      isSetThreshold: isSetThreshold_,
      isSetKnee: isSetKnee_,
      isSetRatio: isSetRatio_,
      isSetAttack: isSetAttack_,
      isSetRelease: isSetRelease_,
      isSetBuffer: isSetBuffer_,
      isSetQ: isSetQ_,
      isSetPlaybackRate: isSetPlaybackRate_,
      isSetPeriodicWave: isSetPeriodicWave_,
      isSetCurve: isSetCurve_,
      isSetOversample: isSetOversample_,
      isSetLoopStart: isSetLoopStart_,
      isSetLoopEnd: isSetLoopEnd_,
      isSetPan: isSetPan_,
      isSetGain: isSetGain_,
      isSetDelay: isSetDelay_,
      isSetOffset: isSetOffset_,
      isSetCustomParam: isSetCustomParam_
  };             
  var getNextFromProcessors = function (k) {
      return function (pag) {
          return function (proc) {
              return Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordInt)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)((function () {
                  var $4185 = Data_Function.flip(Data_Map_Internal.lookup(Data_Ord.ordString))(pag);
                  return function ($4186) {
                      return $4185(Data_Tuple.fst($4186));
                  };
              })())(Data_Array.filter(function (v) {
                  return v.value1.value1 === k;
              })(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(proc)))));
          };
      };
  };
  var getNextFromAggregators = function (k) {
      return function (pag) {
          return function (proc) {
              return Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordInt)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)((function () {
                  var $4187 = Data_Function.flip(Data_Map_Internal.lookup(Data_Ord.ordString))(pag);
                  return function ($4188) {
                      return $4187(Data_Tuple.fst($4188));
                  };
              })())(Data_Array.filter(function (v) {
                  return Data_Set.member(Data_Ord.ordString)(k)(v.value1.value1);
              })(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(proc)))));
          };
      };
  };
  var getNexts = function (k) {
      return function (pag) {
          return function (g) {
              return Data_Semigroup.append(Data_Set.semigroupSet(Data_Ord.ordInt))(getNextFromProcessors(k)(pag)(g.processors))(getNextFromAggregators(k)(pag)(g.aggregators));
          };
      };
  };
  var getFirstCanvas = (function () {
      var $4189 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd);
      var $4190 = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray);
      return function ($4191) {
          return $4189(Data_Array.head($4190($4191)));
      };
  })();
  var genericAudioUnit$prime$prime = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Microphone$prime$prime) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof AudioWorkletGenerator$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof AudioWorkletProcessor$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof AudioWorkletAggregator$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof Play$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof PlayBuf$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof LoopBuf$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
      };
      if (x instanceof Lowpass$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
      };
      if (x instanceof Highpass$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
      };
      if (x instanceof Bandpass$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
      };
      if (x instanceof Lowshelf$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      if (x instanceof Highshelf$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))));
      };
      if (x instanceof Peaking$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))));
      };
      if (x instanceof Notch$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))));
      };
      if (x instanceof Allpass$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))));
      };
      if (x instanceof Convolver$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))));
      };
      if (x instanceof DynamicsCompressor$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))));
      };
      if (x instanceof SawtoothOsc$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))));
      };
      if (x instanceof TriangleOsc$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))));
      };
      if (x instanceof PeriodicOsc$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))));
      };
      if (x instanceof WaveShaper$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))));
      };
      if (x instanceof Dup$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))));
      };
      if (x instanceof SinOsc$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))));
      };
      if (x instanceof SquareOsc$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))));
      };
      if (x instanceof Splitter$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))));
      };
      if (x instanceof StereoPanner$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))));
      };
      if (x instanceof Mul$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))))));
      };
      if (x instanceof Add$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))));
      };
      if (x instanceof Swap$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))))))));
      };
      if (x instanceof Merger$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))))));
      };
      if (x instanceof Constant$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))))))))));
      };
      if (x instanceof Delay$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))))))));
      };
      if (x instanceof Gain$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))))))))))));
      };
      if (x instanceof Speaker$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))))))))));
      };
      if (x instanceof NoSound$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))))))))))))))));
      };
      if (x instanceof SplitRes$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))))))))))));
      };
      if (x instanceof DupRes$prime$prime) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))))))))))))))));
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1159, column 1 - line 1159, column 60): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Microphone$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return AudioWorkletGenerator$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return AudioWorkletProcessor$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return AudioWorkletAggregator$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return Play$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return PlayBuf$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return LoopBuf$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return Lowpass$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return Highpass$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
          return Bandpass$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
          return Lowshelf$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))) {
          return Highshelf$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))) {
          return Peaking$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))) {
          return Notch$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))) {
          return Allpass$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))) {
          return Convolver$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))) {
          return DynamicsCompressor$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))) {
          return SawtoothOsc$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))) {
          return TriangleOsc$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))) {
          return PeriodicOsc$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))) {
          return WaveShaper$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))) {
          return Dup$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))) {
          return SinOsc$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))) {
          return SquareOsc$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))) {
          return Splitter$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))) {
          return StereoPanner$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))))) {
          return Mul$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))))) {
          return Add$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))))))) {
          return Swap$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))))))) {
          return Merger$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))))))))) {
          return Constant$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))))))))) {
          return Delay$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))))))))))) {
          return Gain$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))))))))))) {
          return Speaker$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))))))))))))))) {
          return NoSound$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))))))))))))))) {
          return SplitRes$prime$prime.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))))))))))))))))))))))))))))) {
          return DupRes$prime$prime.value;
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1159, column 1 - line 1159, column 60): " + [ x.constructor.name ]);
  });
  var showAudioUnit$prime$prime = new Data_Show.Show(function (s) {
      return Data_Generic_Rep_Show.genericShow(genericAudioUnit$prime$prime)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Microphone''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "AudioWorkletGenerator''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "AudioWorkletProcessor''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "AudioWorkletAggregator''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Play''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "PlayBuf''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "LoopBuf''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Lowpass''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Highpass''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Bandpass''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Lowshelf''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Highshelf''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Peaking''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Notch''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Allpass''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Convolver''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "DynamicsCompressor''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "SawtoothOsc''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "TriangleOsc''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "PeriodicOsc''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "WaveShaper''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Dup''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "SinOsc''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "SquareOsc''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Splitter''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "StereoPanner''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Mul''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Add''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Swap''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Merger''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Constant''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Delay''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Gain''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Speaker''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "NoSound''";
      })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "SplitRes''";
      })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "DupRes''";
      })))))))))))))))))))))))))))))))))))))))(s);
  });
  var generators = function (dict) {
      return dict.generators;
  };
  var eqStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof On && y instanceof On) {
              return true;
          };
          if (x instanceof Off && y instanceof Off) {
              return true;
          };
          return false;
      };
  });
  var eqOversample = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof TwoX && y instanceof TwoX) {
              return true;
          };
          if (x instanceof FourX && y instanceof FourX) {
              return true;
          };
          return false;
      };
  });
  var eqAudioUnit$prime$prime = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Microphone$prime$prime && y instanceof Microphone$prime$prime) {
              return true;
          };
          if (x instanceof AudioWorkletGenerator$prime$prime && y instanceof AudioWorkletGenerator$prime$prime) {
              return true;
          };
          if (x instanceof AudioWorkletProcessor$prime$prime && y instanceof AudioWorkletProcessor$prime$prime) {
              return true;
          };
          if (x instanceof AudioWorkletAggregator$prime$prime && y instanceof AudioWorkletAggregator$prime$prime) {
              return true;
          };
          if (x instanceof Play$prime$prime && y instanceof Play$prime$prime) {
              return true;
          };
          if (x instanceof PlayBuf$prime$prime && y instanceof PlayBuf$prime$prime) {
              return true;
          };
          if (x instanceof LoopBuf$prime$prime && y instanceof LoopBuf$prime$prime) {
              return true;
          };
          if (x instanceof Lowpass$prime$prime && y instanceof Lowpass$prime$prime) {
              return true;
          };
          if (x instanceof Highpass$prime$prime && y instanceof Highpass$prime$prime) {
              return true;
          };
          if (x instanceof Bandpass$prime$prime && y instanceof Bandpass$prime$prime) {
              return true;
          };
          if (x instanceof Lowshelf$prime$prime && y instanceof Lowshelf$prime$prime) {
              return true;
          };
          if (x instanceof Highshelf$prime$prime && y instanceof Highshelf$prime$prime) {
              return true;
          };
          if (x instanceof Peaking$prime$prime && y instanceof Peaking$prime$prime) {
              return true;
          };
          if (x instanceof Notch$prime$prime && y instanceof Notch$prime$prime) {
              return true;
          };
          if (x instanceof Allpass$prime$prime && y instanceof Allpass$prime$prime) {
              return true;
          };
          if (x instanceof Convolver$prime$prime && y instanceof Convolver$prime$prime) {
              return true;
          };
          if (x instanceof DynamicsCompressor$prime$prime && y instanceof DynamicsCompressor$prime$prime) {
              return true;
          };
          if (x instanceof SawtoothOsc$prime$prime && y instanceof SawtoothOsc$prime$prime) {
              return true;
          };
          if (x instanceof TriangleOsc$prime$prime && y instanceof TriangleOsc$prime$prime) {
              return true;
          };
          if (x instanceof PeriodicOsc$prime$prime && y instanceof PeriodicOsc$prime$prime) {
              return true;
          };
          if (x instanceof WaveShaper$prime$prime && y instanceof WaveShaper$prime$prime) {
              return true;
          };
          if (x instanceof Dup$prime$prime && y instanceof Dup$prime$prime) {
              return true;
          };
          if (x instanceof SinOsc$prime$prime && y instanceof SinOsc$prime$prime) {
              return true;
          };
          if (x instanceof SquareOsc$prime$prime && y instanceof SquareOsc$prime$prime) {
              return true;
          };
          if (x instanceof Splitter$prime$prime && y instanceof Splitter$prime$prime) {
              return true;
          };
          if (x instanceof StereoPanner$prime$prime && y instanceof StereoPanner$prime$prime) {
              return true;
          };
          if (x instanceof Mul$prime$prime && y instanceof Mul$prime$prime) {
              return true;
          };
          if (x instanceof Add$prime$prime && y instanceof Add$prime$prime) {
              return true;
          };
          if (x instanceof Swap$prime$prime && y instanceof Swap$prime$prime) {
              return true;
          };
          if (x instanceof Merger$prime$prime && y instanceof Merger$prime$prime) {
              return true;
          };
          if (x instanceof Constant$prime$prime && y instanceof Constant$prime$prime) {
              return true;
          };
          if (x instanceof Delay$prime$prime && y instanceof Delay$prime$prime) {
              return true;
          };
          if (x instanceof Gain$prime$prime && y instanceof Gain$prime$prime) {
              return true;
          };
          if (x instanceof Speaker$prime$prime && y instanceof Speaker$prime$prime) {
              return true;
          };
          if (x instanceof NoSound$prime$prime && y instanceof NoSound$prime$prime) {
              return true;
          };
          if (x instanceof SplitRes$prime$prime && y instanceof SplitRes$prime$prime) {
              return true;
          };
          if (x instanceof DupRes$prime$prime && y instanceof DupRes$prime$prime) {
              return true;
          };
          return false;
      };
  });
  var ordAudioUnit$prime$prime = new Data_Ord.Ord(function () {
      return eqAudioUnit$prime$prime;
  }, function (a) {
      return function (b) {
          return Data_Ord.compare(Data_Ord.ordString)(Data_Show.show(showAudioUnit$prime$prime)(a))(Data_Show.show(showAudioUnit$prime$prime)(b));
      };
  });
  var makeNaiveReconciliation1 = function (ipt) {
      return {
          prev: ipt.prev,
          cur: ipt.cur,
          reconciliation: Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(Control_Bind.join(Data_List_Types.bindList)(Data_Functor.map(Data_List_Types.functorList)(function (v) {
              return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
                  return Data_List.zipWith(function (a) {
                      return function (b) {
                          return new Data_Tuple.Tuple(a.ptr, b.ptr);
                      };
                  })(new Data_List_Types.Cons(v1.value0, v1.value1))(new Data_List_Types.Cons(v.value1.value0, v.value1.value1));
              })(Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "tag";
              }))(ordAudioUnit$prime$prime))()(new Data_Symbol.IsSymbol(function () {
                  return "name";
              }))(Data_Maybe.ordMaybe(Data_Ord.ordString)))()(new Data_Symbol.IsSymbol(function () {
                  return "chan";
              }))(Data_Ord.ordInt)))(v.value0)(ipt.prev.grouped));
          })(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(ipt.cur.grouped))))
      };
  }; 
  var eqAPNum = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "timeOffset";
          }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
              return "param";
          }))(Data_Eq.eqNumber)))(v)(v1);
      };
  });
  var eqAudioUnit$prime = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Microphone$prime && y instanceof Microphone$prime) {
              return true;
          };
          if (x instanceof AudioWorkletGenerator$prime && y instanceof AudioWorkletGenerator$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(Foreign_Object.eqObject(eqAPNum))(x.value1)(y.value1);
          };
          if (x instanceof AudioWorkletProcessor$prime && y instanceof AudioWorkletProcessor$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(Foreign_Object.eqObject(eqAPNum))(x.value1)(y.value1);
          };
          if (x instanceof AudioWorkletAggregator$prime && y instanceof AudioWorkletAggregator$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(Foreign_Object.eqObject(eqAPNum))(x.value1)(y.value1);
          };
          if (x instanceof Play$prime && y instanceof Play$prime) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof PlayBuf$prime && y instanceof PlayBuf$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof LoopBuf$prime && y instanceof LoopBuf$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(eqAPNum)(x.value1)(y.value1) && x.value2 === y.value2 && x.value3 === y.value3;
          };
          if (x instanceof Lowpass$prime && y instanceof Lowpass$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Highpass$prime && y instanceof Highpass$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Bandpass$prime && y instanceof Bandpass$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Lowshelf$prime && y instanceof Lowshelf$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Highshelf$prime && y instanceof Highshelf$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Peaking$prime && y instanceof Peaking$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1) && Data_Eq.eq(eqAPNum)(x.value2)(y.value2);
          };
          if (x instanceof Notch$prime && y instanceof Notch$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Allpass$prime && y instanceof Allpass$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1);
          };
          if (x instanceof Convolver$prime && y instanceof Convolver$prime) {
              return x.value0 === y.value0;
          };
          if (x instanceof DynamicsCompressor$prime && y instanceof DynamicsCompressor$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && Data_Eq.eq(eqAPNum)(x.value1)(y.value1) && Data_Eq.eq(eqAPNum)(x.value2)(y.value2) && Data_Eq.eq(eqAPNum)(x.value3)(y.value3) && Data_Eq.eq(eqAPNum)(x.value4)(y.value4);
          };
          if (x instanceof SawtoothOsc$prime && y instanceof SawtoothOsc$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof TriangleOsc$prime && y instanceof TriangleOsc$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof PeriodicOsc$prime && y instanceof PeriodicOsc$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0) && x.value1 === y.value1;
          };
          if (x instanceof WaveShaper$prime && y instanceof WaveShaper$prime) {
              return x.value0 === y.value0 && Data_Eq.eq(eqOversample)(x.value1)(y.value1);
          };
          if (x instanceof Dup$prime && y instanceof Dup$prime) {
              return true;
          };
          if (x instanceof SinOsc$prime && y instanceof SinOsc$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof SquareOsc$prime && y instanceof SquareOsc$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof Splitter$prime && y instanceof Splitter$prime) {
              return x.value0 === y.value0;
          };
          if (x instanceof StereoPanner$prime && y instanceof StereoPanner$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof Mul$prime && y instanceof Mul$prime) {
              return true;
          };
          if (x instanceof Add$prime && y instanceof Add$prime) {
              return true;
          };
          if (x instanceof Swap$prime && y instanceof Swap$prime) {
              return true;
          };
          if (x instanceof Merger$prime && y instanceof Merger$prime) {
              return Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqInt))(x.value0)(y.value0);
          };
          if (x instanceof Constant$prime && y instanceof Constant$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof Delay$prime && y instanceof Delay$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof Gain$prime && y instanceof Gain$prime) {
              return Data_Eq.eq(eqAPNum)(x.value0)(y.value0);
          };
          if (x instanceof Speaker$prime && y instanceof Speaker$prime) {
              return true;
          };
          if (x instanceof NoSound$prime && y instanceof NoSound$prime) {
              return true;
          };
          if (x instanceof SplitRes$prime && y instanceof SplitRes$prime) {
              return x.value0 === y.value0;
          };
          if (x instanceof DupRes$prime && y instanceof DupRes$prime) {
              return true;
          };
          return false;
      };
  });
  var dupResGetImpetus = function (dictOrd) {
      return function (dictOrd1) {
          return function (s) {
              return Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd)(Data_Map_Internal.values(Data_Functor.map(Data_Map_Internal.functorMap)(function (v) {
                  return v.ptr;
              })(Data_Map_Internal.filter(dictOrd1)(function (i) {
                  return Data_Eq.eq(eqAudioUnit$prime)(i.au)(DupRes$prime.value) && Data_Set.size(i.prev) === 0;
              })(s.flat))));
          };
      };
  };
  var dummyCanvasInfo = {
      w: 0.0,
      h: 0.0,
      boundingClientRect: {
          width: 0.0,
          height: 0.0,
          x: 0.0,
          y: 0.0
      }
  };
  var describeConnection = function (start) {
      return function (end) {
          return function (passage) {
              return Data_List.fromFoldable(Data_Set.foldableSet)(Data_Map.keys(Data_Map_Internal.filter(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(function (v) {
                  return Data_Maybe.fromMaybe(false)(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $4198 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      var $4199 = Data_Set.member(Data_Ord.ordInt)(v.value1);
                      return function ($4200) {
                          return $4198($4199((function (v1) {
                              return v1.next;
                          })($4200)));
                      };
                  })())(Data_Map_Internal.lookup(Data_Ord.ordInt)(v.value0)(end.flat)));
              })(Data_Map_Internal.fromFoldable(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(Data_List_Types.foldableList)(Data_List.catMaybes(Data_Functor.map(Data_List_Types.functorList)(function (v) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(v))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Map_Internal.lookup(Data_Ord.ordInt)(v.value0)(passage)))(Data_Map_Internal.lookup(Data_Ord.ordInt)(v.value1)(passage)));
              })(Control_Bind.join(Data_List_Types.bindList)(Data_Functor.map(Data_List_Types.functorList)(function (au) {
                  return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.Tuple.create(au.ptr))(Data_List.fromFoldable(Data_Set.foldableSet)(au.next));
              })(Data_Map_Internal.values(start.flat)))))))));
          };
      };
  };                  
  var defaultExporter = {
      acquire: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
      use: function (v) {
          return function (v1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
          };
      },
      release: function (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      }
  };                  
  var chopHack = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return v.value1;
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 771, column 1 - line 771, column 25): " + [ v.constructor.name ]);
  };
  var channelConstructor = function (v) {
      if (v instanceof Merger$prime) {
          return Data_Maybe.Just.create(Data_List.length(v.value0));
      };
      if (v instanceof Splitter$prime) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var chainer = function (f) {
      return function (nextIfTerminus) {
          return function (toplevelName) {
              return function (pag) {
                  return function (vs) {
                      return function (g) {
                          return Data_List.catMaybes(Data_Functor.map(Data_List_Types.functorList)(function (v) {
                              return f(nextIfTerminus)(toplevelName)(v.value0)(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value0)(pag))(pag)(v.value1)(g);
                          })(Foreign_Object.toUnfoldable(Data_List_Types.unfoldableList)(vs)));
                      };
                  };
              };
          };
      };
  };
  var au$prime$prime = function (v) {
      if (v instanceof Microphone$prime) {
          return Microphone$prime$prime.value;
      };
      if (v instanceof AudioWorkletGenerator$prime) {
          return AudioWorkletGenerator$prime$prime.value;
      };
      if (v instanceof AudioWorkletProcessor$prime) {
          return AudioWorkletProcessor$prime$prime.value;
      };
      if (v instanceof AudioWorkletAggregator$prime) {
          return AudioWorkletAggregator$prime$prime.value;
      };
      if (v instanceof Play$prime) {
          return Play$prime$prime.value;
      };
      if (v instanceof PlayBuf$prime) {
          return PlayBuf$prime$prime.value;
      };
      if (v instanceof LoopBuf$prime) {
          return LoopBuf$prime$prime.value;
      };
      if (v instanceof Lowpass$prime) {
          return Lowpass$prime$prime.value;
      };
      if (v instanceof Highpass$prime) {
          return Highpass$prime$prime.value;
      };
      if (v instanceof Bandpass$prime) {
          return Bandpass$prime$prime.value;
      };
      if (v instanceof Lowshelf$prime) {
          return Lowshelf$prime$prime.value;
      };
      if (v instanceof Highshelf$prime) {
          return Highshelf$prime$prime.value;
      };
      if (v instanceof Peaking$prime) {
          return Peaking$prime$prime.value;
      };
      if (v instanceof Notch$prime) {
          return Notch$prime$prime.value;
      };
      if (v instanceof Allpass$prime) {
          return Allpass$prime$prime.value;
      };
      if (v instanceof Convolver$prime) {
          return Convolver$prime$prime.value;
      };
      if (v instanceof DynamicsCompressor$prime) {
          return DynamicsCompressor$prime$prime.value;
      };
      if (v instanceof SawtoothOsc$prime) {
          return SawtoothOsc$prime$prime.value;
      };
      if (v instanceof TriangleOsc$prime) {
          return TriangleOsc$prime$prime.value;
      };
      if (v instanceof PeriodicOsc$prime) {
          return PeriodicOsc$prime$prime.value;
      };
      if (v instanceof WaveShaper$prime) {
          return WaveShaper$prime$prime.value;
      };
      if (v instanceof Dup$prime) {
          return Dup$prime$prime.value;
      };
      if (v instanceof SinOsc$prime) {
          return SinOsc$prime$prime.value;
      };
      if (v instanceof SquareOsc$prime) {
          return SquareOsc$prime$prime.value;
      };
      if (v instanceof Splitter$prime) {
          return Splitter$prime$prime.value;
      };
      if (v instanceof StereoPanner$prime) {
          return StereoPanner$prime$prime.value;
      };
      if (v instanceof Mul$prime) {
          return Mul$prime$prime.value;
      };
      if (v instanceof Add$prime) {
          return Add$prime$prime.value;
      };
      if (v instanceof Swap$prime) {
          return Swap$prime$prime.value;
      };
      if (v instanceof Merger$prime) {
          return Merger$prime$prime.value;
      };
      if (v instanceof Constant$prime) {
          return Constant$prime$prime.value;
      };
      if (v instanceof Delay$prime) {
          return Delay$prime$prime.value;
      };
      if (v instanceof Gain$prime) {
          return Gain$prime$prime.value;
      };
      if (v instanceof Speaker$prime) {
          return Speaker$prime$prime.value;
      };
      if (v instanceof NoSound$prime) {
          return NoSound$prime$prime.value;
      };
      if (v instanceof SplitRes$prime) {
          return SplitRes$prime$prime.value;
      };
      if (v instanceof DupRes$prime) {
          return DupRes$prime$prime.value;
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1310, column 1 - line 1310, column 34): " + [ v.constructor.name ]);
  };
  var au$prime = function (dictPos) {
      return function (v) {
          if (v instanceof Microphone) {
              return {
                  au: Microphone$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof AudioWorkletGenerator) {
              return {
                  au: new AudioWorkletGenerator$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof AudioWorkletProcessor) {
              return {
                  au: new AudioWorkletProcessor$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof AudioWorkletAggregator) {
              return {
                  au: new AudioWorkletAggregator$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Play) {
              return {
                  au: new Play$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof PlayBuf) {
              return {
                  au: new PlayBuf$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof LoopBuf) {
              return {
                  au: new LoopBuf$prime(v.value1, v.value2, v.value3, v.value4),
                  name: v.value0
              };
          };
          if (v instanceof Lowpass) {
              return {
                  au: new Lowpass$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Highpass) {
              return {
                  au: new Highpass$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Bandpass) {
              return {
                  au: new Bandpass$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Lowshelf) {
              return {
                  au: new Lowshelf$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Highshelf) {
              return {
                  au: new Highshelf$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Peaking) {
              return {
                  au: new Peaking$prime(v.value1, v.value2, v.value3),
                  name: v.value0
              };
          };
          if (v instanceof Notch) {
              return {
                  au: new Notch$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Allpass) {
              return {
                  au: new Allpass$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Convolver) {
              return {
                  au: new Convolver$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof DynamicsCompressor) {
              return {
                  au: new DynamicsCompressor$prime(v.value1, v.value2, v.value3, v.value4, v.value5),
                  name: v.value0
              };
          };
          if (v instanceof SawtoothOsc) {
              return {
                  au: new SawtoothOsc$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof TriangleOsc) {
              return {
                  au: new TriangleOsc$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof PeriodicOsc) {
              return {
                  au: new PeriodicOsc$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof WaveShaper) {
              return {
                  au: new WaveShaper$prime(v.value1, v.value2),
                  name: v.value0
              };
          };
          if (v instanceof Dup1) {
              return {
                  au: Dup$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Dup2) {
              return {
                  au: Dup$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Dup3) {
              return {
                  au: Dup$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Dup4) {
              return {
                  au: Dup$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Dup5) {
              return {
                  au: Dup$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof SinOsc) {
              return {
                  au: new SinOsc$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof SquareOsc) {
              return {
                  au: new SquareOsc$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof Split1) {
              return {
                  au: new Splitter$prime(1),
                  name: v.value0
              };
          };
          if (v instanceof Split2) {
              return {
                  au: new Splitter$prime(2),
                  name: v.value0
              };
          };
          if (v instanceof Split3) {
              return {
                  au: new Splitter$prime(3),
                  name: v.value0
              };
          };
          if (v instanceof Split4) {
              return {
                  au: new Splitter$prime(4),
                  name: v.value0
              };
          };
          if (v instanceof Split5) {
              return {
                  au: new Splitter$prime(5),
                  name: v.value0
              };
          };
          if (v instanceof StereoPanner) {
              return {
                  au: new StereoPanner$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof Mul) {
              return {
                  au: Mul$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Add) {
              return {
                  au: Add$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Merger) {
              return {
                  au: new Merger$prime(Data_List_Types.Nil.value),
                  name: v.value0
              };
          };
          if (v instanceof Constant) {
              return {
                  au: new Constant$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof Delay) {
              return {
                  au: new Delay$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof Gain) {
              return {
                  au: new Gain$prime(v.value1),
                  name: v.value0
              };
          };
          if (v instanceof Speaker) {
              return {
                  au: Speaker$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof NoSound) {
              return {
                  au: NoSound$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof Graph) {
              return {
                  au: NoSound$prime.value,
                  name: v.value0
              };
          };
          if (v instanceof SplitRes) {
              return {
                  au: new SplitRes$prime(v.value0),
                  name: Data_Maybe.Nothing.value
              };
          };
          if (v instanceof DupRes) {
              return {
                  au: DupRes$prime.value,
                  name: Data_Maybe.Nothing.value
              };
          };
          throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1210, column 1 - line 1210, column 82): " + [ v.constructor.name ]);
      };
  };
  var ap_ = function (a) {
      return {
          param: a,
          timeOffset: 0.0
      };
  };
  var gain = function (dictPos) {
      return function (n) {
          return Gain.create(Data_Maybe.Nothing.value)(ap_(n));
      };
  };
  var gain$prime = function (dictPos) {
      return function (n) {
          var $4201 = Gain.create(Data_Maybe.Nothing.value)(ap_(n));
          var $4202 = Data_NonEmpty.singleton(Data_List_Types.plusList);
          return function ($4203) {
              return $4201($4202($4203));
          };
      };
  };
  var periodicOsc = function (handle) {
      return function (n) {
          return new PeriodicOsc(Data_Maybe.Nothing.value, ap_(n), handle);
      };
  };
  var semiringAudioUnit = new Data_Semiring.Semiring(function (a) {
      return function (b) {
          return new Add(Data_Maybe.Nothing.value, new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(b, Data_List_Types.Nil.value)));
      };
  }, function (a) {
      return function (b) {
          return new Mul(Data_Maybe.Nothing.value, new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(b, Data_List_Types.Nil.value)));
      };
  }, new Constant(Data_Maybe.Nothing.value, ap_(1.0)), new Constant(Data_Maybe.Nothing.value, ap_(0.0)));
  var tagToAU = function (v) {
      if (v instanceof Microphone$prime$prime) {
          return Microphone$prime.value;
      };
      if (v instanceof Play$prime$prime) {
          return new Play$prime("", 0.0);
      };
      if (v instanceof AudioWorkletGenerator$prime$prime) {
          return new AudioWorkletGenerator$prime("", Foreign_Object.empty);
      };
      if (v instanceof AudioWorkletProcessor$prime$prime) {
          return new AudioWorkletProcessor$prime("", Foreign_Object.empty);
      };
      if (v instanceof AudioWorkletAggregator$prime$prime) {
          return new AudioWorkletAggregator$prime("", Foreign_Object.empty);
      };
      if (v instanceof PlayBuf$prime$prime) {
          return new PlayBuf$prime("", ap_(-1.0));
      };
      if (v instanceof LoopBuf$prime$prime) {
          return new LoopBuf$prime("", ap_(-1.0), -1.0, -1.0);
      };
      if (v instanceof Lowpass$prime$prime) {
          return new Lowpass$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Highpass$prime$prime) {
          return new Highpass$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Bandpass$prime$prime) {
          return new Bandpass$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Lowshelf$prime$prime) {
          return new Lowshelf$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Highshelf$prime$prime) {
          return new Highshelf$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Peaking$prime$prime) {
          return new Peaking$prime(ap_(-1.0), ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Notch$prime$prime) {
          return new Notch$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Allpass$prime$prime) {
          return new Allpass$prime(ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof Convolver$prime$prime) {
          return new Convolver$prime("");
      };
      if (v instanceof DynamicsCompressor$prime$prime) {
          return new DynamicsCompressor$prime(ap_(-1.0), ap_(-1.0), ap_(-1.0), ap_(-1.0), ap_(-1.0));
      };
      if (v instanceof SawtoothOsc$prime$prime) {
          return new SawtoothOsc$prime(ap_(50000.0));
      };
      if (v instanceof TriangleOsc$prime$prime) {
          return new TriangleOsc$prime(ap_(50000.0));
      };
      if (v instanceof PeriodicOsc$prime$prime) {
          return new PeriodicOsc$prime(ap_(50000.0), "");
      };
      if (v instanceof WaveShaper$prime$prime) {
          return new WaveShaper$prime("", None.value);
      };
      if (v instanceof Dup$prime$prime) {
          return Dup$prime.value;
      };
      if (v instanceof SinOsc$prime$prime) {
          return new SinOsc$prime(ap_(50000.0));
      };
      if (v instanceof SquareOsc$prime$prime) {
          return new SquareOsc$prime(ap_(50000.0));
      };
      if (v instanceof Splitter$prime$prime) {
          return new Splitter$prime(-1 | 0);
      };
      if (v instanceof StereoPanner$prime$prime) {
          return new StereoPanner$prime(ap_(3.0));
      };
      if (v instanceof Mul$prime$prime) {
          return Mul$prime.value;
      };
      if (v instanceof Add$prime$prime) {
          return Add$prime.value;
      };
      if (v instanceof Swap$prime$prime) {
          return Swap$prime.value;
      };
      if (v instanceof Merger$prime$prime) {
          return new Merger$prime(Data_List_Types.Nil.value);
      };
      if (v instanceof Constant$prime$prime) {
          return new Constant$prime(ap_(1000.0));
      };
      if (v instanceof Delay$prime$prime) {
          return new Delay$prime(ap_(1000.0));
      };
      if (v instanceof Gain$prime$prime) {
          return new Gain$prime(ap_(1000.0));
      };
      if (v instanceof Speaker$prime$prime) {
          return Speaker$prime.value;
      };
      if (v instanceof NoSound$prime$prime) {
          return NoSound$prime.value;
      };
      if (v instanceof SplitRes$prime$prime) {
          return new SplitRes$prime(-1 | 0);
      };
      if (v instanceof DupRes$prime$prime) {
          return DupRes$prime.value;
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1385, column 1 - line 1385, column 37): " + [ v.constructor.name ]);
  };
  var makeContiguousUnits = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 === 0) {
                  return Data_List_Types.Nil.value;
              };
              return Data_Functor.map(Data_List_Types.functorList)(function (i) {
                  return {
                      au: tagToAU(v.tag),
                      name: Data_Maybe.Nothing.value,
                      status: Off.value,
                      next: Data_Set.empty,
                      chan: v.chan,
                      head: -42 | 0,
                      prev: Data_Set.empty,
                      ptr: i
                  };
              })(Data_Unfoldable1.range(Data_List_Types.unfoldable1List)(v1)((v1 + v2 | 0) - 1 | 0));
          };
      };
  };
  var apT = function (v) {
      return v.timeOffset;
  };
  var startConstructor = function (v) {
      if (v instanceof Play$prime) {
          return new Data_Maybe.Just(v.value1);
      };
      if (v instanceof PlayBuf$prime) {
          return new Data_Maybe.Just(apT(v.value1));
      };
      if (v instanceof LoopBuf$prime) {
          return new Data_Maybe.Just(apT(v.value1));
      };
      if (v instanceof SawtoothOsc$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      if (v instanceof TriangleOsc$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      if (v instanceof PeriodicOsc$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      if (v instanceof SinOsc$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      if (v instanceof SquareOsc$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      if (v instanceof Constant$prime) {
          return new Data_Maybe.Just(apT(v.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var apP = function (v) {
      return v.param;
  };
  var scp = function (i) {
      return function (n) {
          return function (nx) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  var $3775 = Data_Maybe.fromMaybe(true)(Data_Functor.map(Data_Maybe.functorMaybe)(napeq(Data_Eq.eqNumber)(v.value1))(Foreign_Object.lookup(v.value0)(nx)));
                  if ($3775) {
                      return Data_Maybe.Just.create(new SetCustomParam(i, v.value0, apP(v.value1), apT(v.value1)));
                  };
                  return Data_Maybe.Nothing.value;
              })(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(n));
          };
      };
  };
  var reconciliationToInstructionSet = function (v) {
      var setFilter = function (i) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (x) {
                          return function (y) {
                              return function (z) {
                                  return [ (function () {
                                      var $3779 = napeq(Data_Eq.eqNumber)(a)(x);
                                      if ($3779) {
                                          return Data_Maybe.Just.create(new SetFrequency(i, apP(a), apT(a)));
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })(), (function () {
                                      var $3780 = napeq(Data_Eq.eqNumber)(b)(y);
                                      if ($3780) {
                                          return Data_Maybe.Just.create(new SetQ(i, apP(b), apT(b)));
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })(), (function () {
                                      var $3781 = napeq(Data_Eq.eqNumber)(c)(z);
                                      if ($3781) {
                                          return Data_Maybe.Just.create(new SetGain(i, apP(c), apT(c)));
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })() ];
                              };
                          };
                      };
                  };
              };
          };
      };
      var setFQFilter = function (i) {
          return function (a) {
              return function (b) {
                  return function (x) {
                      return function (y) {
                          return [ (function () {
                              var $3782 = napeq(Data_Eq.eqNumber)(a)(x);
                              if ($3782) {
                                  return Data_Maybe.Just.create(new SetFrequency(i, apP(a), apT(a)));
                              };
                              return Data_Maybe.Nothing.value;
                          })(), (function () {
                              var $3783 = napeq(Data_Eq.eqNumber)(b)(y);
                              if ($3783) {
                                  return Data_Maybe.Just.create(new SetQ(i, apP(b), apT(b)));
                              };
                              return Data_Maybe.Nothing.value;
                          })() ];
                      };
                  };
              };
          };
      };
      var setFGFilter = function (i) {
          return function (a) {
              return function (c) {
                  return function (x) {
                      return function (z) {
                          return [ (function () {
                              var $3784 = napeq(Data_Eq.eqNumber)(a)(x);
                              if ($3784) {
                                  return Data_Maybe.Just.create(new SetFrequency(i, apP(a), apT(a)));
                              };
                              return Data_Maybe.Nothing.value;
                          })(), (function () {
                              var $3785 = napeq(Data_Eq.eqNumber)(c)(z);
                              if ($3785) {
                                  return Data_Maybe.Just.create(new SetGain(i, apP(c), apT(c)));
                              };
                              return Data_Maybe.Nothing.value;
                          })() ];
                      };
                  };
              };
          };
      };
      var set$prime = function (i) {
          return function (v1) {
              return function (v2) {
                  if (v1 instanceof AudioWorkletGenerator$prime && v2 instanceof AudioWorkletGenerator$prime) {
                      return scp(i)(v1.value1)(v2.value1);
                  };
                  if (v1 instanceof AudioWorkletProcessor$prime && v2 instanceof AudioWorkletProcessor$prime) {
                      return scp(i)(v1.value1)(v2.value1);
                  };
                  if (v1 instanceof AudioWorkletAggregator$prime && v2 instanceof AudioWorkletAggregator$prime) {
                      return scp(i)(v1.value1)(v2.value1);
                  };
                  if (v1 instanceof PlayBuf$prime && v2 instanceof PlayBuf$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3801 = napeq(Data_Eq.eqNumber)(v1.value1)(v2.value1);
                          if ($3801) {
                              return Data_Maybe.Just.create(new SetPlaybackRate(i, apP(v1.value1), apT(v1.value1)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof LoopBuf$prime && v2 instanceof LoopBuf$prime) {
                      return [ (function () {
                          var $3806 = napeq(Data_Eq.eqNumber)(v1.value1)(v2.value1);
                          if ($3806) {
                              return Data_Maybe.Just.create(new SetPlaybackRate(i, apP(v1.value1), apT(v1.value1)));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3807 = v1.value2 !== v2.value2;
                          if ($3807) {
                              return Data_Maybe.Just.create(new SetLoopStart(i, v1.value2));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3808 = v1.value3 !== v2.value3;
                          if ($3808) {
                              return Data_Maybe.Just.create(new SetLoopEnd(i, v1.value3));
                          };
                          return Data_Maybe.Nothing.value;
                      })() ];
                  };
                  if (v1 instanceof Lowpass$prime && v2 instanceof Lowpass$prime) {
                      return setFQFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Highpass$prime && v2 instanceof Highpass$prime) {
                      return setFQFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Bandpass$prime && v2 instanceof Bandpass$prime) {
                      return setFQFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Allpass$prime && v2 instanceof Allpass$prime) {
                      return setFQFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Highshelf$prime && v2 instanceof Highshelf$prime) {
                      return setFGFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Lowshelf$prime && v2 instanceof Lowshelf$prime) {
                      return setFGFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof Peaking$prime && v2 instanceof Peaking$prime) {
                      return setFilter(i)(v1.value0)(v1.value1)(v1.value2)(v2.value0)(v2.value1)(v2.value2);
                  };
                  if (v1 instanceof Notch$prime && v2 instanceof Notch$prime) {
                      return setFQFilter(i)(v1.value0)(v1.value1)(v2.value0)(v2.value1);
                  };
                  if (v1 instanceof DynamicsCompressor$prime && v2 instanceof DynamicsCompressor$prime) {
                      return [ (function () {
                          var $3851 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3851) {
                              return Data_Maybe.Just.create(new SetThreshold(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3852 = napeq(Data_Eq.eqNumber)(v1.value1)(v2.value1);
                          if ($3852) {
                              return Data_Maybe.Just.create(new SetKnee(i, apP(v1.value1), apT(v1.value1)));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3853 = napeq(Data_Eq.eqNumber)(v1.value2)(v2.value2);
                          if ($3853) {
                              return Data_Maybe.Just.create(new SetRatio(i, apP(v1.value2), apT(v1.value2)));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3854 = napeq(Data_Eq.eqNumber)(v1.value3)(v2.value3);
                          if ($3854) {
                              return Data_Maybe.Just.create(new SetAttack(i, apP(v1.value3), apT(v1.value3)));
                          };
                          return Data_Maybe.Nothing.value;
                      })(), (function () {
                          var $3855 = napeq(Data_Eq.eqNumber)(v1.value4)(v2.value4);
                          if ($3855) {
                              return Data_Maybe.Just.create(new SetRelease(i, apP(v1.value4), apT(v1.value4)));
                          };
                          return Data_Maybe.Nothing.value;
                      })() ];
                  };
                  if (v1 instanceof SinOsc$prime && v2 instanceof SinOsc$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3866 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3866) {
                              return Data_Maybe.Just.create(new SetFrequency(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof SquareOsc$prime && v2 instanceof SquareOsc$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3869 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3869) {
                              return Data_Maybe.Just.create(new SetFrequency(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof SawtoothOsc$prime && v2 instanceof SawtoothOsc$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3872 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3872) {
                              return Data_Maybe.Just.create(new SetFrequency(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof TriangleOsc$prime && v2 instanceof TriangleOsc$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3875 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3875) {
                              return Data_Maybe.Just.create(new SetFrequency(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof PeriodicOsc$prime && v2 instanceof PeriodicOsc$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3878 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3878) {
                              return Data_Maybe.Just.create(new SetFrequency(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof WaveShaper$prime && v2 instanceof WaveShaper$prime) {
                      return [ (function () {
                          var $3883 = Data_Eq.notEq(eqOversample)(v1.value1)(v2.value1);
                          if ($3883) {
                              return new Data_Maybe.Just(SetOversample.create(i)(os2s(v1.value1)));
                          };
                          return Data_Maybe.Nothing.value;
                      })() ];
                  };
                  if (v1 instanceof StereoPanner$prime && v2 instanceof StereoPanner$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3888 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3888) {
                              return Data_Maybe.Just.create(new SetPan(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof Constant$prime && v2 instanceof Constant$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3891 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3891) {
                              return Data_Maybe.Just.create(new SetOffset(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof Delay$prime && v2 instanceof Delay$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3894 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3894) {
                              return Data_Maybe.Just.create(new SetDelay(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  if (v1 instanceof Gain$prime && v2 instanceof Gain$prime) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                          var $3897 = napeq(Data_Eq.eqNumber)(v1.value0)(v2.value0);
                          if ($3897) {
                              return Data_Maybe.Just.create(new SetGain(i, apP(v1.value0), apT(v1.value0)));
                          };
                          return Data_Maybe.Nothing.value;
                      })());
                  };
                  return Control_Applicative.pure(Control_Applicative.applicativeArray)(Data_Maybe.Nothing.value);
              };
          };
      };
      var reversed = Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.swap)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.reconciliation)));
      var set = Data_List.catMaybes(Data_List.fromFoldable(Data_Foldable.foldableArray)(Control_Bind.join(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return set$prime(v1.ptr)(v1.au)(Data_Maybe.fromMaybe(v1.au)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
              return v2.au;
          })(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Ord.ordInt)(v1.ptr)(reversed))(Data_Function.flip(Data_Map_Internal.lookup(Data_Ord.ordInt))(v.prev.flat)))));
      })(Data_Array.filter(function (v1) {
          return Data_Eq.eq(eqStatus)(v1.status)(On.value);
      })(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(v.cur.flat)))))));
      var statusChange = function (dictUnfoldable) {
          return function (isNow) {
              return function (was) {
                  return Data_Map_Internal.toUnfoldable(dictUnfoldable)(Data_Map_Internal.filter(Data_Ord.ordInt)(function (v1) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(eqStatus))(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                          return v2.status;
                      })(Data_Map_Internal.lookup(Data_Ord.ordInt)(v1)(v.cur.flat)))(isNow);
                  })(Data_Map_Internal.filterKeys(Data_Ord.ordInt)(function (k) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(eqStatus))(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                          return v1.status;
                      })(Data_Map_Internal.lookup(Data_Ord.ordInt)(k)(v.prev.flat)))(was);
                  })(v.reconciliation)));
              };
          };
      };
      var shuffle = Shuffle.create(statusChange(Data_Unfoldable.unfoldableArray)(new Data_Maybe.Just(On.value))(new Data_Maybe.Just(On.value)));
      var stop = Data_Functor.map(Data_List_Types.functorList)(function ($4207) {
          return Stop.create(Data_Tuple.fst($4207));
      })(Data_List.filter((function () {
          var $4208 = Data_Maybe.maybe(false)(function ($4211) {
              return isGen((function (v1) {
                  return v1.au;
              })($4211));
          });
          var $4209 = Data_Function.flip(Data_Map_Internal.lookup(Data_Ord.ordInt))(v.prev.flat);
          return function ($4210) {
              return $4208($4209(Data_Tuple.fst($4210)));
          };
      })())(statusChange(Data_List_Types.unfoldableList)(new Data_Maybe.Just(Off.value))(new Data_Maybe.Just(On.value))));
      var $$new = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(Data_Tuple.uncurry(Data_Tuple.uncurry(Data_Tuple.uncurry(NewUnit.create)))))(Data_List.catMaybes(Data_Functor.map(Data_List_Types.functorList)(function (i) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (ptr) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(Data_Tuple.Tuple.create(i)(au$prime$prime(ptr.au)), channelConstructor(ptr.au)), sourceConstructor(ptr.au)), startConstructor(ptr.au));
          })(Data_Map_Internal.lookup(Data_Ord.ordInt)(i)(v.cur.flat));
      })(Data_List.catMaybes(Data_Functor.map(Data_List_Types.functorList)(function (k) {
          return Data_Map_Internal.lookup(Data_Ord.ordInt)(k)(v.reconciliation);
      })(Data_List.fromFoldable(Data_Set.foldableSet)(Data_Map.keys(Data_Map_Internal.filter(Data_Ord.ordInt)(function (i) {
          return Data_Eq.eq(eqStatus)(i.status)(Off.value);
      })(v.prev.flat))))))));
      var harmonizeCurrChannels$prime = function (v1) {
          return function (v2) {
              if (v2.au instanceof SplitRes$prime) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v2.au.value0, 0));
              };
              if (v2.au instanceof Merger$prime) {
                  return Data_List.head(Data_Functor.map(Data_List_Types.functorList)((function () {
                      var $4212 = Data_Tuple.Tuple.create(0);
                      return function ($4213) {
                          return $4212(Data_Tuple.fst($4213));
                      };
                  })())(Data_List.filter(function (v3) {
                      return v1.ptr === v3.value1;
                  })(Data_List.mapWithIndex(function (i) {
                      return function (a) {
                          return new Data_Tuple.Tuple(i, a);
                      };
                  })(v2.au.value0))));
              };
              return Data_Maybe.Nothing.value;
          };
      };
      var harmonizeCurrChannels = function (v1) {
          return Data_Maybe.fromMaybe(Data_Maybe.Nothing.value)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(harmonizeCurrChannels$prime)(Data_Map_Internal.lookup(Data_Ord.ordInt)(v1.value0)(v.cur.flat)))(Data_Map_Internal.lookup(Data_Ord.ordInt)(v1.value1)(v.cur.flat)));
      };
      var disconnect = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(DisconnectFrom.create))(describeConnection(v.prev)(v.cur)(v.reconciliation));
      var connect = (function () {
          var conn = describeConnection(v.cur)(v.prev)(reversed);
          return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(Data_Tuple.uncurry(ConnectTo.create)))(Data_Functor.map(Data_List_Types.functorList)(function (i) {
              return new Data_Tuple.Tuple(i, harmonizeCurrChannels(i));
          })(conn));
      })();
      return {
          prev: v.prev,
          cur: v.cur,
          reconciliation: v.reconciliation,
          instructionSet: Data_Semigroup.append(Data_List_Types.semigroupList)(stop)(Data_Semigroup.append(Data_List_Types.semigroupList)(disconnect)(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(shuffle))(Data_Semigroup.append(Data_List_Types.semigroupList)($$new)(Data_Semigroup.append(Data_List_Types.semigroupList)(connect)(set)))))
      };
  };
  var agp2au$prime = function (v) {
      if (v instanceof GAudioWorkletProcessor) {
          return {
              au: new AudioWorkletProcessor$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GLowpass) {
          return {
              au: new Lowpass$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GHighpass) {
          return {
              au: new Highpass$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GBandpass) {
          return {
              au: new Bandpass$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GLowshelf) {
          return {
              au: new Lowshelf$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GHighshelf) {
          return {
              au: new Highshelf$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GPeaking) {
          return {
              au: new Peaking$prime(v.value1, v.value2, v.value3),
              name: v.value0
          };
      };
      if (v instanceof GNotch) {
          return {
              au: new Notch$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GDelay) {
          return {
              au: new Delay$prime(v.value1),
              name: v.value0
          };
      };
      if (v instanceof GAllpass) {
          return {
              au: new Allpass$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GConvolver) {
          return {
              au: new Convolver$prime(v.value1),
              name: v.value0
          };
      };
      if (v instanceof GDynamicsCompressor) {
          return {
              au: new DynamicsCompressor$prime(v.value1, v.value2, v.value3, v.value4, v.value5),
              name: v.value0
          };
      };
      if (v instanceof GWaveShaper) {
          return {
              au: new WaveShaper$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GStereoPanner) {
          return {
              au: new StereoPanner$prime(v.value1),
              name: v.value0
          };
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1178, column 1 - line 1178, column 72): " + [ v.constructor.name ]);
  };
  var chainsForProcessor = function (dictPos) {
      return function (nextIfTerminus) {
          return function (toplevelName) {
              return function (myName) {
                  return function (ptr$prime) {
                      return function (pag) {
                          return function (v) {
                              return function (g) {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(ptr$prime)(function (ptr) {
                                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(pag))(function (pv) {
                                          var nexts = getNexts(myName)(pag)(g);
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                                              ptr: ptr,
                                              chan: Data_Typelevel_Num_Sets["toInt'"](dictPos.Nat0())(Type_Proxy["Proxy"].value),
                                              prev: Data_Set.singleton(pv),
                                              next: (function () {
                                                  var $3970 = Data_Set.isEmpty(nexts);
                                                  if ($3970) {
                                                      return nextIfTerminus;
                                                  };
                                                  return nexts;
                                              })(),
                                              head: ptr,
                                              au: (agp2au$prime(v.value0)).au,
                                              status: On.value,
                                              name: Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                                                  return myName + v1;
                                              })(toplevelName)
                                          });
                                      });
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var chainsForProcessors = function (dictPos) {
      return chainer(chainsForProcessor(dictPos));
  };
  var aggregators = function (dict) {
      return dict.aggregators;
  };
  var aga2au$prime = function (v) {
      if (v instanceof GAudioWorkletAggregator) {
          return {
              au: new AudioWorkletAggregator$prime(v.value1, v.value2),
              name: v.value0
          };
      };
      if (v instanceof GMul) {
          return {
              au: Mul$prime.value,
              name: v.value0
          };
      };
      if (v instanceof GAdd) {
          return {
              au: Add$prime.value,
              name: v.value0
          };
      };
      if (v instanceof GGain) {
          return {
              au: new Gain$prime(v.value1),
              name: v.value0
          };
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1169, column 1 - line 1169, column 73): " + [ v.constructor.name ]);
  };
  var chainsForAggregator = function (dictPos) {
      return function (nextIfTerminus) {
          return function (toplevelName) {
              return function (myName) {
                  return function (ptr$prime) {
                      return function (pag) {
                          return function (v) {
                              return function (g) {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(ptr$prime)(function (ptr) {
                                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordInt))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Map_Internal.lookup(Data_Ord.ordString))(pag))(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1)))))(function (pv) {
                                          var nexts = getNexts(myName)(pag)(g);
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                                              ptr: ptr,
                                              chan: Data_Typelevel_Num_Sets["toInt'"](dictPos.Nat0())(Type_Proxy["Proxy"].value),
                                              prev: pv,
                                              next: (function () {
                                                  var $3988 = Data_Set.isEmpty(nexts);
                                                  if ($3988) {
                                                      return nextIfTerminus;
                                                  };
                                                  return nexts;
                                              })(),
                                              head: ptr,
                                              au: (aga2au$prime(v.value0)).au,
                                              status: On.value,
                                              name: Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                                                  return myName + v1;
                                              })(toplevelName)
                                          });
                                      });
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var chainsForAggregators = function (dictPos) {
      return chainer(chainsForAggregator(dictPos));
  };
  var addContiguousNewUnits = function (ug) {
      return function (toModify) {
          var nu = makeContiguousUnits(Data_Tuple.fst(ug))(Data_Map_Internal.size(toModify.flat))(Data_Ord.max(Data_Ord.ordInt)(0)(nonEmptyListLength(Data_Tuple.snd(ug)) - Data_Maybe.maybe(0)(nonEmptyListLength)(Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
              return "tag";
          }))(ordAudioUnit$prime$prime))()(new Data_Symbol.IsSymbol(function () {
              return "name";
          }))(Data_Maybe.ordMaybe(Data_Ord.ordString)))()(new Data_Symbol.IsSymbol(function () {
              return "chan";
          }))(Data_Ord.ordInt)))(Data_Tuple.fst(ug))(toModify.grouped)) | 0));
          return {
              grouped: Data_Maybe.maybe(toModify.grouped)(function (nel) {
                  return Data_Map_Internal.insertWith(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "tag";
                  }))(ordAudioUnit$prime$prime))()(new Data_Symbol.IsSymbol(function () {
                      return "name";
                  }))(Data_Maybe.ordMaybe(Data_Ord.ordString)))()(new Data_Symbol.IsSymbol(function () {
                      return "chan";
                  }))(Data_Ord.ordInt)))(function (v) {
                      return function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(new Data_List_Types.Cons(v1.value0, v1.value1)));
                      };
                  })(Data_Tuple.fst(ug))(nel)(toModify.grouped);
              })(maybeNel(nu)),
              flat: Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(toModify.flat)(Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(function (i) {
                  return new Data_Tuple.Tuple(i.ptr, i);
              })(nu)))
          };
      };
  };
  var normalizeReconcilable = function (target) {
      return function (tom) {
          var go = function ($copy_v) {
              return function ($copy_toModify) {
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, toModify) {
                      if (v instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return toModify;
                      };
                      if (v instanceof Data_List_Types.Cons) {
                          var tm = addContiguousNewUnits(v.value0)(toModify);
                          $tco_var_v = v.value1;
                          $copy_toModify = tm;
                          return;
                      };
                      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 3598, column 3 - line 3598, column 66): " + [ v.constructor.name, toModify.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $copy_toModify);
                  };
                  return $tco_result;
              };
          };
          return go(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(target.grouped))(tom);
      };
  };
  var makeNaiveReconciliation0 = function (prev) {
      return function (cur) {
          var cur_ = normalizeReconcilable(prev)(cur);
          var prev_ = normalizeReconcilable(cur)(prev);
          return {
              prev: prev_,
              cur: cur_
          };
      };
  };
  var add = function (dictPos) {
      return Add.create(Data_Maybe.Nothing.value);
  };
  var acomp = function (a) {
      return function (b) {
          return ucomp(a.au)(b.au) && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(a.name)(b.name) && a.chan === b.chan);
      };
  };
  var audioGrouper = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Map_Internal.empty;
      };
      if (v instanceof Data_List_Types.Cons) {
          var pt = Data_List.partition(acomp(v.value0))(v.value1);
          return Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
              return "tag";
          }))(ordAudioUnit$prime$prime))()(new Data_Symbol.IsSymbol(function () {
              return "name";
          }))(Data_Maybe.ordMaybe(Data_Ord.ordString)))()(new Data_Symbol.IsSymbol(function () {
              return "chan";
          }))(Data_Ord.ordInt))))(Data_Map_Internal.singleton({
              tag: au$prime$prime(v.value0.au),
              chan: v.value0.chan,
              name: v.value0.name
          })(new Data_NonEmpty.NonEmpty(v.value0, pt.yes)))(audioGrouper(pt.no));
      };
      throw new Error("Failed pattern match at FRP.Behavior.Audio (line 3533, column 1 - line 3535, column 15): " + [ v.constructor.name ]);
  };
  var a2c = function (dictPos) {
      return function (a) {
          return Data_Typelevel_Num_Sets["toInt'"](dictPos.Nat0())(Type_Proxy["Proxy"].value);
      };
  };
  var audioToPtr = function (dictPos) {
      var terminus = function (dictPos1) {
          return function (ptr) {
              return function (v) {
                  var au = au$prime(dictPos1)(v);
                  var p = Record.merge()()({
                      head: ptr.ptr,
                      next: ptr.next,
                      prev: Data_Set.empty,
                      au: au.au,
                      name: au.name
                  })(ptr);
                  return {
                      len: 1,
                      flat: Data_Map_Internal.singleton(ptr.ptr)(p),
                      p: p
                  };
              };
          };
      };
      var passthrough = function (dictPos1) {
          return function (ptr) {
              return function (v) {
                  return function (a) {
                      var r = go(dictPos1)(ptr.ptr)(Data_Set.singleton(ptr.ptr))(a);
                      var au = au$prime(dictPos1)(v);
                      var p = Record.merge()()({
                          head: ptr.ptr,
                          next: ptr.next,
                          prev: Data_Set.singleton(r.p.head),
                          au: au.au,
                          name: au.name
                      })(ptr);
                      return {
                          len: r.len + 1 | 0,
                          p: p,
                          flat: Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(r.flat)(Data_Map_Internal.singleton(ptr.ptr)(p))
                      };
                  };
              };
          };
      };
      var listthrough = function (dictPos1) {
          return function (dictPos2) {
              return function (ptr) {
                  return function (v) {
                      return function (l) {
                          var r = Data_Foldable.foldl(Data_List_Types.foldableList)(function (v1) {
                              return function (a) {
                                  return new Data_NonEmpty.NonEmpty(go(dictPos2)((v1.value0.p.ptr + v1.value0.len | 0) - 1 | 0)(Data_Set.singleton(ptr.ptr))(a), new Data_List_Types.Cons(v1.value0, v1.value1));
                              };
                          })(Data_NonEmpty.singleton(Data_List_Types.plusList)(go(dictPos2)(ptr.ptr)(Data_Set.singleton(ptr.ptr))(Data_NonEmpty.head(l))))(Data_NonEmpty.tail(l));
                          var au = (function (v1) {
                              return {
                                  au: mergerHack(v1.au)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(function (v2) {
                                      return v2.p.ptr;
                                  })(r)),
                                  name: v1.name
                              };
                          })(au$prime(dictPos1)(v));
                          var p = Record.merge()()({
                              head: ptr.ptr,
                              next: ptr.next,
                              prev: Data_Set.fromFoldable(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(Data_Ord.ordInt)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(function (v1) {
                                  return v1.p.head;
                              })(r)),
                              au: au.au,
                              name: au.name
                          })(ptr);
                          return {
                              len: Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(Data_Semiring.add(Data_Semiring.semiringInt))(0)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(function (v1) {
                                  return v1.len;
                              })(r)) + 1 | 0,
                              flat: Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt)))(Data_Map_Internal.empty)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(function (v1) {
                                  return v1.flat;
                              })(r)))(Data_Map_Internal.singleton(ptr.ptr)(p)),
                              p: p
                          };
                      };
                  };
              };
          };
      };
      var graphthrough = function (dictPos1) {
          return function (dictPos2) {
              return function (ptr) {
                  return function (v) {
                      return function (g) {
                          var auHack = au$prime(dictPos1)(v);
                          var dummy = Record.merge()()(ptr)({
                              head: ptr.ptr,
                              prev: Data_Set.empty,
                              au: new Constant$prime({
                                  param: 0.0,
                                  timeOffset: 0.0
                              }),
                              name: auHack.name
                          });
                          var $4010 = Foreign_Object.size(g.aggregators) === 0 && (Foreign_Object.size(g.generators) === 0 && Foreign_Object.size(g.processors) === 0);
                          if ($4010) {
                              return {
                                  len: 1,
                                  flat: Data_Map_Internal.singleton(ptr.ptr)(dummy),
                                  p: dummy
                              };
                          };
                          var pag = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Array.mapWithIndex(function (i) {
                              return function (k) {
                                  return new Data_Tuple.Tuple(k, i + ptr.ptr | 0);
                              };
                          })(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Foreign_Object.keys(g.processors))(Foreign_Object.keys(g.aggregators))));
                          var r = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (v1) {
                              return function (v2) {
                                  var o = go(dictPos2)(v1.curP)(getNexts(v2.value0)(pag)(g))(v2.value1);
                                  return {
                                      curP: o.len + v1.curP | 0,
                                      algSteps: Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordString))(Data_Map_Internal.singleton(v2.value0)(o))(v1.algSteps)
                                  };
                              };
                          })({
                              curP: (ptr.ptr + Data_Map_Internal.size(pag) | 0) - 1 | 0,
                              algSteps: Data_Map_Internal.empty
                          })(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(g.generators));
                          var pagWithGens = Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordString))(pag)(Data_Map_Internal.mapMaybeWithKey(Data_Ord.ordString)(function (v1) {
                              return function (z) {
                                  return new Data_Maybe.Just(z.p.ptr);
                              };
                          })(r.algSteps));
                          var pc = Data_Semigroup.append(Data_List_Types.semigroupList)(chainsForProcessors(dictPos2)(ptr.next)(auHack.name)(pagWithGens)(g.processors)(g))(chainsForAggregators(dictPos2)(ptr.next)(auHack.name)(pagWithGens)(g.aggregators)(g));
                          var flat = Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(function (i) {
                              return new Data_Tuple.Tuple(i.ptr, i);
                          })(pc)))(Data_Foldable.fold(Data_List_Types.foldableList)(Data_Map_Internal.monoidMap(Data_Ord.ordInt))(Data_Functor.map(Data_List_Types.functorList)(function (v1) {
                              return v1.flat;
                          })(Data_Map_Internal.values(r.algSteps))));
                          var p = Data_List.head(Data_List.filter(function (i) {
                              return Data_Eq.eq(Data_Set.eqSet(Data_Eq.eqInt))(i.next)(ptr.next);
                          })(Data_Map_Internal.values(flat)));
                          return Data_Maybe.maybe({
                              len: 1,
                              flat: Data_Map_Internal.singleton(ptr.ptr)(dummy),
                              p: dummy
                          })(function (v1) {
                              return {
                                  len: Data_Map_Internal.size(flat),
                                  flat: flat,
                                  p: v1
                              };
                          })(p);
                      };
                  };
              };
          };
      };
      var go$prime = function (dictPos1) {
          return function (ptr) {
              return function (v) {
                  if (v instanceof Microphone) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof AudioWorkletGenerator) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof AudioWorkletProcessor) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof AudioWorkletAggregator) {
                      return listthrough(dictPos1)(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Play) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof PlayBuf) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof LoopBuf) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof Lowpass) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Highpass) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Bandpass) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Lowshelf) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Highshelf) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Peaking) {
                      return passthrough(dictPos1)(ptr)(v)(v.value4);
                  };
                  if (v instanceof Notch) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Allpass) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Convolver) {
                      return passthrough(dictPos1)(ptr)(v)(v.value2);
                  };
                  if (v instanceof DynamicsCompressor) {
                      return passthrough(dictPos1)(ptr)(v)(v.value6);
                  };
                  if (v instanceof SawtoothOsc) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof TriangleOsc) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof PeriodicOsc) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof WaveShaper) {
                      return passthrough(dictPos1)(ptr)(v)(v.value3);
                  };
                  if (v instanceof Dup1) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD1)(ptr)(v)(v.value1)(v.value2(DupRes.value))(dupResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Dup2) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD2)(ptr)(v)(v.value1)(v.value2(DupRes.value))(dupResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Dup3) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD3)(ptr)(v)(v.value1)(v.value2(DupRes.value))(dupResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Dup4) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD4)(ptr)(v)(v.value1)(v.value2(DupRes.value))(dupResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Dup5) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD5)(ptr)(v)(v.value1)(v.value2(DupRes.value))(dupResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof SinOsc) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof SquareOsc) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof Constant) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof NoSound) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof SplitRes) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof DupRes) {
                      return terminus(dictPos1)(ptr)(v);
                  };
                  if (v instanceof StereoPanner) {
                      return passthrough(dictPos1)(ptr)(v)(v.value2);
                  };
                  if (v instanceof Delay) {
                      return passthrough(dictPos1)(ptr)(v)(v.value2);
                  };
                  if (v instanceof Mul) {
                      return listthrough(dictPos1)(dictPos1)(ptr)(v)(v.value1);
                  };
                  if (v instanceof Merger) {
                      return listthrough(dictPos1)(Data_Typelevel_Num_Sets.posD1)(ptr)(v)(new Data_NonEmpty.NonEmpty(Data_Vec.head(dictPos1)(v.value1), chopHack(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Vec.toArray(v.value1)))));
                  };
                  if (v instanceof Add) {
                      return listthrough(dictPos1)(dictPos1)(ptr)(v)(v.value1);
                  };
                  if (v instanceof Gain) {
                      return listthrough(dictPos1)(dictPos1)(ptr)(v)(v.value2);
                  };
                  if (v instanceof Speaker) {
                      return listthrough(dictPos1)(dictPos1)(ptr)(v)(v.value1);
                  };
                  if (v instanceof Split1) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD1)(ptr)(v)(v.value1)(v.value2(Data_Vec.fill(Data_Typelevel_Num_Sets.natD1)(SplitRes.create)))(splitResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Split2) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD2)(ptr)(v)(v.value1)(v.value2(Data_Vec.fill(Data_Typelevel_Num_Sets.natD2)(SplitRes.create)))(splitResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Split3) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD3)(ptr)(v)(v.value1)(v.value2(Data_Vec.fill(Data_Typelevel_Num_Sets.natD3)(SplitRes.create)))(splitResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Split4) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD4)(ptr)(v)(v.value1)(v.value2(Data_Vec.fill(Data_Typelevel_Num_Sets.natD4)(SplitRes.create)))(splitResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Split5) {
                      return closurethrough(dictPos1)(Data_Typelevel_Num_Sets.posD5)(ptr)(v)(v.value1)(v.value2(Data_Vec.fill(Data_Typelevel_Num_Sets.natD5)(SplitRes.create)))(splitResGetImpetus(Data_Ord.ordInt)(Data_Ord.ordInt));
                  };
                  if (v instanceof Graph) {
                      return graphthrough(dictPos1)(dictPos1)(ptr)(v)(v.value1);
                  };
                  throw new Error("Failed pattern match at FRP.Behavior.Audio (line 1839, column 3 - line 1839, column 66): " + [ ptr.constructor.name, v.constructor.name ]);
              };
          };
      };
      var go = function (dictPos1) {
          return function (i) {
              return function (next) {
                  return function (au) {
                      return go$prime(dictPos1)({
                          ptr: i + 1 | 0,
                          next: next,
                          status: On.value,
                          chan: a2c(dictPos1)(au)
                      })(au);
                  };
              };
          };
      };
      var closurethrough = function (dictPos1) {
          return function (dictPos2) {
              return function (ptr) {
                  return function (v) {
                      return function (a) {
                          return function (evaluatedClosure) {
                              return function (getImpeti) {
                                  var closureResult = go(dictPos1)(ptr.ptr - 1 | 0)(ptr.next)(evaluatedClosure);
                                  var impeti = getImpeti(closureResult);
                                  var myPtr = ptr.ptr + closureResult.len | 0;
                                  var continuation = go(dictPos2)(ptr.ptr + closureResult.len | 0)(Data_Set.singleton(myPtr))(a);
                                  var au = au$prime(dictPos1)(v);
                                  var p = Record.merge()()({
                                      head: closureResult.p.head,
                                      ptr: myPtr,
                                      prev: Data_Set.singleton(continuation.p.head),
                                      next: impeti,
                                      au: au.au,
                                      name: au.name
                                  })(ptr);
                                  var out = {
                                      len: (continuation.len + closureResult.len | 0) + 1 | 0,
                                      flat: Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(closureResult.flat)(Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordInt))(continuation.flat)(Data_Map_Internal.singleton(myPtr)(p))),
                                      p: p
                                  };
                                  return out;
                              };
                          };
                      };
                  };
              };
          };
      };
      return go(dictPos)(-1 | 0)(Data_Set.empty);
  };
  var avRunnableMedia = function (dictPos) {
      return new RunnableMedia(function (scene) {
          return function (accumulator) {
              return function (ctx) {
                  return function (engineInfo) {
                      return function (audioInfo) {
                          return function (visualInfo) {
                              return function (exporter) {
                                  var __contract = Data_Int.toNumber(engineInfo.msBetweenSamples);
                                  return function __do() {
                                      var __accumulator = Effect_Ref["new"](accumulator)();
                                      var __totalFromStart = Effect_Ref["new"](0.0)();
                                      var ciRef = Effect_Ref["new"](0)();
                                      var __totalTillProgram = Effect_Ref["new"](0.0)();
                                      var __totalProgram = Effect_Ref["new"](0.0)();
                                      var __totalPostProgram = Effect_Ref["new"](0.0)();
                                      var reconRef = Effect_Ref["new"]({
                                          grouped: Data_Map_Internal.empty,
                                          flat: Data_Map_Internal.empty
                                      })();
                                      var clock = Effect_Ref["new"](0)();
                                      var units = Effect_Ref["new"]([  ])();
                                      var audioClockStart = $foreign.getAudioClockTime(ctx)();
                                      var fiber = Effect_Aff.launchAff(exporter.acquire)();
                                      var bam = FRP_Event.subscribe(FRP_Event_Time.interval(engineInfo.msBetweenPings))(Data_Function["const"](function __do() {
                                          var ct = Effect_Ref.read(clock)();
                                          Effect_Ref.write(ct + engineInfo.msBetweenSamples | 0)(clock)();
                                          var acc_ = $foreign.getAudioClockTime(ctx)();
                                          var curIt = Effect_Ref.read(ciRef)();
                                          Effect_Ref.write(curIt + 1 | 0)(ciRef)();
                                          var clockNow_ = Effect_Ref.read(clock)();
                                          var startingPosWRT = (Data_Int.toNumber(clockNow_) + engineInfo.initialOffset) / 1000.0 - (acc_ - audioClockStart);
                                          var $4153 = startingPosWRT > engineInfo.rewindUpperBound;
                                          if ($4153) {
                                              var newV = clockNow_ - engineInfo.msBetweenSamples | 0;
                                              return Effect_Ref.write(newV)(clock)();
                                          };
                                          (function () {
                                              var $4154 = startingPosWRT < engineInfo.fastforwardLowerBound;
                                              if ($4154) {
                                                  var newV = clockNow_ + engineInfo.msBetweenSamples | 0;
                                                  Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Fastforwarding " + (Data_Show.show(Data_Show.showInt)(clockNow_) + (" " + (Data_Show.show(Data_Show.showInt)(newV) + (" " + Data_Show.show(Data_Show.showNumber)(startingPosWRT))))))();
                                                  return Effect_Ref.write(newV)(clock)();
                                              };
                                              return Data_Unit.unit;
                                          })();
                                          var __startTime = Data_Functor.map(Effect.functorEffect)(Data_JSDate.getTime)(Data_JSDate.now)();
                                          var _accNow = Effect_Ref.read(__accumulator)();
                                          var __cvsNow = getFirstCanvas(visualInfo.canvases);
                                          var canvasInfo = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(dummyCanvasInfo))(function (_cvsNow) {
                                              return function __do() {
                                                  var __r = Effect_Exception["try"](function __do() {
                                                      var __cvs = _cvsNow();
                                                      var w = Graphics_Canvas.getCanvasWidth(__cvs)();
                                                      var h = Graphics_Canvas.getCanvasHeight(__cvs)();
                                                      var boundingClientRect = $foreign.getBoundingClientRect(__cvs)();
                                                      return {
                                                          w: w,
                                                          h: h,
                                                          boundingClientRect: boundingClientRect
                                                      };
                                                  })();
                                                  return Data_Either.either(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(dummyCanvasInfo)))(Control_Applicative.pure(Effect.applicativeEffect))(__r)();
                                              };
                                          })(__cvsNow)();
                                          var timeInSeconds = Data_Int.toNumber(ct) / 1000.0;
                                          var behavior = scene(_accNow)(canvasInfo)(timeInSeconds);
                                          var bang = FRP_Event.create();
                                          var behaviorSampled = FRP_Behavior.sample_(FRP_Event.eventIsEvent)(behavior)(bang.event);
                                          var unsub = FRP_Event.subscribe(behaviorSampled)(function (v) {
                                              return function __do() {
                                                  Effect_Ref.write(v.value2)(__accumulator)();
                                                  Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (viz) {
                                                      var cvs_ = getFirstCanvas(visualInfo.canvases);
                                                      return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (cvs__) {
                                                          return function __do() {
                                                              Effect_Exception["try"](function __do() {
                                                                  var cvs = cvs__();
                                                                  var canvasCtx = Graphics_Canvas.getContext2D(cvs)();
                                                                  Graphics_Canvas.clearRect(canvasCtx)({
                                                                      height: canvasInfo.h,
                                                                      width: canvasInfo.w,
                                                                      x: 0.0,
                                                                      y: 0.0
                                                                  })();
                                                                  return Graphics_Drawing.render(canvasCtx)(viz)();
                                                              })();
                                                              return Data_Unit.unit;
                                                          };
                                                      })(cvs_);
                                                  })(v.value1)();
                                                  return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (aud) {
                                                      var i = audioToPtr(dictPos)(aud);
                                                      var cur = {
                                                          flat: i.flat,
                                                          grouped: audioGrouper(Data_List.fromFoldable(Data_Map_Internal.foldableMap)(i.flat))
                                                      };
                                                      return function __do() {
                                                          var prev = Effect_Ref.read(reconRef)();
                                                          Effect_Ref.write(cur)(reconRef)();
                                                          var prog$prime = makeNaiveReconciliation0(prev)(cur);
                                                          var prog = makeNaiveReconciliation1(prog$prime);
                                                          var instr = reconciliationToInstructionSet(prog);
                                                          var audioClockCur = $foreign.getAudioClockTime(ctx)();
                                                          var instructions = {
                                                              t: clockNow_,
                                                              i: Data_Array.fromFoldable(Data_List_Types.foldableList)(instr.instructionSet)
                                                          };
                                                          Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.joinFiber(fiber))(function (env) {
                                                              return exporter.use(env)({
                                                                  id: curIt,
                                                                  timeStamp: timeInSeconds,
                                                                  audio: Control_Bind.bind(Data_Maybe.bindMaybe)(v.value0)(Data_Function["const"](new Data_Maybe.Just(instructions.i))),
                                                                  canvas: v.value1
                                                              });
                                                          }))();
                                                          var uts = Effect_Ref.read(units)();
                                                          var uts$prime = $foreign.touchAudio(toFFI)(audioClockStart + (Data_Int.toNumber(instructions.t) + engineInfo.initialOffset) / 1000.0)(instructions.i)(ctx)(audioInfo)(uts)();
                                                          Effect_Ref.write(uts$prime)(units)();
                                                          var __endTime = Data_Functor.map(Effect.functorEffect)(Data_JSDate.getTime)(Data_JSDate.now)();
                                                          (function () {
                                                              var $4156 = __endTime - __startTime >= __contract;
                                                              if ($4156) {
                                                                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Audio control processing is too slow. It took this long: " + (Data_Show.show(Data_Show.showNumber)(__endTime - __startTime) + (" but it needs to take this long: " + Data_Show.show(Data_Show.showNumber)(__contract))))();
                                                              };
                                                              return Data_Unit.unit;
                                                          })();
                                                          return Data_Unit.unit;
                                                      };
                                                  })(v.value0)();
                                              };
                                          })();
                                          bang.push(Data_Unit.unit)();
                                          return unsub();
                                      }))();
                                      return function __do() {
                                          bam();
                                          return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.joinFiber(fiber))(function (env) {
                                              return exporter.release(env);
                                          }))();
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      });
  };
  var soundscapeRunnableMedia = function (dictPos) {
      return new RunnableMedia(function (f) {
          return function (a) {
              return function (ac) {
                  return function (ei) {
                      return function (ai) {
                          return function (vi) {
                              return function (ex) {
                                  return runInBrowser(avRunnableMedia(dictPos))(function (z) {
                                      return function (wh) {
                                          return function (s) {
                                              return Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(function (x) {
                                                  return new AV(new Data_Maybe.Just(x), Data_Maybe.Nothing.value, Data_Unit.unit);
                                              })(f(s));
                                          };
                                      };
                                  })(Data_Unit.unit)(ac)(ei)(ai)(vi)(ex);
                              };
                          };
                      };
                  };
              };
          };
      });
  };
  exports["periodicOsc"] = periodicOsc;
  exports["gain"] = gain;
  exports["speaker'"] = speaker$prime;
  exports["gain'"] = gain$prime;
  exports["defaultExporter"] = defaultExporter;
  exports["makePeriodicWave"] = makePeriodicWave;
  exports["runInBrowser"] = runInBrowser;
  exports["semiringAudioUnit"] = semiringAudioUnit;
  exports["soundscapeRunnableMedia"] = soundscapeRunnableMedia;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Klank.Dev"] = $PS["Type.Klank.Dev"] || {};
  var exports = $PS["Type.Klank.Dev"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Audio = $PS["FRP.Behavior.Audio"];
  var FRP_Event = $PS["FRP.Event"];
  var noSound = Data_Function["const"](Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(FRP_Behavior_Audio["speaker'"](Data_Typelevel_Num_Sets.posD1)(Data_Semiring.zero(FRP_Behavior_Audio.semiringAudioUnit))));
  var defaultEngineInfo = {
      msBetweenSamples: 20,
      msBetweenPings: 15,
      fastforwardLowerBound: 2.5e-2,
      rewindUpperBound: 0.15,
      initialOffset: 0.1
  };
  var klank = {
      run: FRP_Behavior_Audio.runInBrowser(FRP_Behavior_Audio.soundscapeRunnableMedia(Data_Typelevel_Num_Sets.posD1))(noSound),
      periodicWaves: function (v) {
          return function (prev) {
              return function (res) {
                  return function (v1) {
                      return res(prev);
                  };
              };
          };
      },
      floatArrays: function (prev) {
          return function (res) {
              return function (v) {
                  return res(prev);
              };
          };
      },
      buffers: function (v) {
          return function (prev) {
              return function (res) {
                  return function (v1) {
                      return res(prev);
                  };
              };
          };
      },
      tracks: function (prev) {
          return function (res) {
              return function (v) {
                  return res(prev);
              };
          };
      },
      worklets: function (prev) {
          return function (res) {
              return function (v) {
                  return res(prev);
              };
          };
      },
      enableMicrophone: false,
      accumulator: function (res) {
          return function (v) {
              return res(Data_Unit.unit);
          };
      },
      exporter: FRP_Behavior_Audio.defaultExporter,
      engineInfo: defaultEngineInfo
  };
  exports["klank"] = klank;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["FRP.Behavior.Audio.Example.Periodic"] = $PS["FRP.Behavior.Audio.Example.Periodic"] || {};
  var exports = $PS["FRP.Behavior.Audio.Example.Periodic"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Vec = $PS["Data.Vec"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Audio = $PS["FRP.Behavior.Audio"];
  var FRP_Event = $PS["FRP.Event"];
  var Foreign_Object = $PS["Foreign.Object"];
  var $$Math = $PS["Math"];
  var Type_Klank_Dev = $PS["Type.Klank.Dev"];                
  var scene = function (time) {
      var rad = $$Math.pi * time;
      return Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(FRP_Behavior_Audio["speaker'"](Data_Typelevel_Num_Sets.posD1)(FRP_Behavior_Audio.gain(Data_Typelevel_Num_Sets.posD1)(0.2 + 0.15 * $$Math.sin(0.2 * rad))(new Data_NonEmpty.NonEmpty(FRP_Behavior_Audio["gain'"](Data_Typelevel_Num_Sets.posD1)(0.1)(FRP_Behavior_Audio.periodicOsc("smooth")(1238.0 + 10.0 * $$Math.sin(30.3 * rad))), new Data_List_Types.Cons(FRP_Behavior_Audio["gain'"](Data_Typelevel_Num_Sets.posD1)(0.12)(FRP_Behavior_Audio.periodicOsc("smooth")(1235.0 + 10.0 * $$Math.sin(31.7 * rad))), new Data_List_Types.Cons(FRP_Behavior_Audio["gain'"](Data_Typelevel_Num_Sets.posD1)(5.0e-2)(FRP_Behavior_Audio.periodicOsc("smooth")(1241.0 + 10.0 * $$Math.sin(20.0 * rad))), Data_List_Types.Nil.value))))));
  };
  var periodicWaves = function (ctx) {
      return function (v) {
          return function (res) {
              return function (rej) {
                  return function __do() {
                      var pw = FRP_Behavior_Audio.makePeriodicWave(Data_Typelevel_Num_Sets.posD3)(ctx)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(0.5)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.25)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(0.1)(Data_Vec.empty))))(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(0.2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(1.0e-2)(Data_Vec.empty))))();
                      return res(Foreign_Object.singleton("smooth")(pw))();
                  };
              };
          };
      };
  };
  var main = {
      run: FRP_Behavior_Audio.runInBrowser(FRP_Behavior_Audio.soundscapeRunnableMedia(Data_Typelevel_Num_Sets.posD1))(scene),
      periodicWaves: periodicWaves,
      floatArrays: Type_Klank_Dev.klank.floatArrays,
      buffers: Type_Klank_Dev.klank.buffers,
      tracks: Type_Klank_Dev.klank.tracks,
      worklets: Type_Klank_Dev.klank.worklets,
      enableMicrophone: Type_Klank_Dev.klank.enableMicrophone,
      accumulator: Type_Klank_Dev.klank.accumulator,
      exporter: Type_Klank_Dev.klank.exporter,
      engineInfo: Type_Klank_Dev.klank.engineInfo
  };
  exports["scene"] = scene;
  exports["periodicWaves"] = periodicWaves;
  exports["main"] = main;
})(PS);
PS["FRP.Behavior.Audio.Example.Periodic"].main();